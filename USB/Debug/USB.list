
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d48  08006d48  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d50  08006d50  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08006d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00001c04  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d08  20001d08  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d5dd  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002984  00000000  00000000  0002d754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b60  00000000  00000000  000300d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000860  00000000  00000000  00030c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024e07  00000000  00000000  00031498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f40e  00000000  00000000  0005629f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2e8e  00000000  00000000  000656ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d0c  00000000  00000000  0013853c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0013b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000104 	.word	0x20000104
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006ce4 	.word	0x08006ce4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000108 	.word	0x20000108
 80001e8:	08006ce4 	.word	0x08006ce4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 f96c 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f810 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f878 	bl	80005e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f8:	f005 feb2 	bl	8006260 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(Buf1, 7);
 80004fc:	2107      	movs	r1, #7
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <main+0x28>)
 8000500:	f005 ff68 	bl	80063d4 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000508:	f000 f9d0 	bl	80008ac <HAL_Delay>
	  CDC_Transmit_FS(Buf1, 7);
 800050c:	e7f6      	b.n	80004fc <main+0x14>
 800050e:	bf00      	nop
 8000510:	20000000 	.word	0x20000000

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f006 fbb2 	bl	8006c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xcc>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd0>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000584:	2308      	movs	r3, #8
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fed4 	bl	8002348 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a6:	f000 f871 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2105      	movs	r1, #5
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f935 	bl	8002838 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d4:	f000 f85a 	bl	800068c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_GPIO_Init+0xa0>)
 800065a:	f000 fc09 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xa0>)
 8000678:	f000 fa4e 	bl	8000b18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40021800 	.word	0x40021800

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000734:	f000 f89a 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <OTG_FS_IRQHandler+0x10>)
 8000742:	f000 fcf2 	bl	800112a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20001604 	.word	0x20001604

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80007a2:	f006 fa7b 	bl	8006c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a6:	f7ff fe9f 	bl	80004e8 <main>
  bx  lr    
 80007aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80007ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80007b8:	08006d58 	.word	0x08006d58
  ldr r2, =_sbss
 80007bc:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80007c0:	20001d08 	.word	0x20001d08

080007c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_Init+0x40>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <HAL_Init+0x40>)
 80007d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_Init+0x40>)
 80007de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_Init+0x40>)
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f94f 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 f808 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff ff4c 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023c00 	.word	0x40023c00

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x54>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f967 	bl	8000afe <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f92f 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x5c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000008 	.word	0x20000008
 8000864:	20000010 	.word	0x20000010
 8000868:	2000000c 	.word	0x2000000c

0800086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000010 	.word	0x20000010
 8000890:	20000120 	.word	0x20000120

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000120 	.word	0x20000120

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff ffee 	bl	8000894 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffde 	bl	8000894 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000010 	.word	0x20000010

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <__NVIC_EnableIRQ+0x38>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8e 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff29 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff3e 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ff8e 	bl	80009e8 <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff31 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffa2 	bl	8000a50 <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e177      	b.n	8000e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8166 	bne.w	8000e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d130      	bne.n	8000bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	f003 0201 	and.w	r2, r3, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d017      	beq.n	8000c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d123      	bne.n	8000c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0203 	and.w	r2, r3, #3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80c0 	beq.w	8000e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a65      	ldr	r2, [pc, #404]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b63      	ldr	r3, [pc, #396]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cba:	4a61      	ldr	r2, [pc, #388]	; (8000e40 <HAL_GPIO_Init+0x328>)
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a58      	ldr	r2, [pc, #352]	; (8000e44 <HAL_GPIO_Init+0x32c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d037      	beq.n	8000d56 <HAL_GPIO_Init+0x23e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <HAL_GPIO_Init+0x330>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d031      	beq.n	8000d52 <HAL_GPIO_Init+0x23a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <HAL_GPIO_Init+0x334>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d02b      	beq.n	8000d4e <HAL_GPIO_Init+0x236>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a55      	ldr	r2, [pc, #340]	; (8000e50 <HAL_GPIO_Init+0x338>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d025      	beq.n	8000d4a <HAL_GPIO_Init+0x232>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_GPIO_Init+0x33c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01f      	beq.n	8000d46 <HAL_GPIO_Init+0x22e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a53      	ldr	r2, [pc, #332]	; (8000e58 <HAL_GPIO_Init+0x340>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x22a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a52      	ldr	r2, [pc, #328]	; (8000e5c <HAL_GPIO_Init+0x344>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x226>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a51      	ldr	r2, [pc, #324]	; (8000e60 <HAL_GPIO_Init+0x348>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x222>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <HAL_GPIO_Init+0x34c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x21e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4f      	ldr	r2, [pc, #316]	; (8000e68 <HAL_GPIO_Init+0x350>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x21a>
 8000d2e:	2309      	movs	r3, #9
 8000d30:	e012      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d32:	230a      	movs	r3, #10
 8000d34:	e010      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d36:	2308      	movs	r3, #8
 8000d38:	e00e      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e00c      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e00a      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e008      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x240>
 8000d56:	2300      	movs	r3, #0
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	4935      	ldr	r1, [pc, #212]	; (8000e40 <HAL_GPIO_Init+0x328>)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc4:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_GPIO_Init+0x354>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	f67f ae84 	bls.w	8000b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40013800 	.word	0x40013800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021400 	.word	0x40021400
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40021c00 	.word	0x40021c00
 8000e64:	40022000 	.word	0x40022000
 8000e68:	40022400 	.word	0x40022400
 8000e6c:	40013c00 	.word	0x40013c00

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	619a      	str	r2, [r3, #24]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af02      	add	r7, sp, #8
 8000ea8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e101      	b.n	80010b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d106      	bne.n	8000ed4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f005 fbc8 	bl	8006664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee2:	d102      	bne.n	8000eea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 ffb1 	bl	8002e56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7c1a      	ldrb	r2, [r3, #16]
 8000efc:	f88d 2000 	strb.w	r2, [sp]
 8000f00:	3304      	adds	r3, #4
 8000f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f04:	f001 fe90 	bl	8002c28 <USB_CoreInit>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2202      	movs	r2, #2
 8000f12:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0ce      	b.n	80010b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 ffa9 	bl	8002e78 <USB_SetCurrentMode>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0bf      	b.n	80010b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e04a      	b.n	8000fd4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3315      	adds	r3, #21
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3314      	adds	r3, #20
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	332e      	adds	r3, #46	; 0x2e
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	331c      	adds	r3, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3320      	adds	r3, #32
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3324      	adds	r3, #36	; 0x24
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d3af      	bcc.n	8000f3e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e044      	b.n	800106e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3b5      	bcc.n	8000fe4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7c1a      	ldrb	r2, [r3, #16]
 8001080:	f88d 2000 	strb.w	r2, [sp]
 8001084:	3304      	adds	r3, #4
 8001086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001088:	f001 ff42 	bl	8002f10 <USB_DevInit>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00c      	b.n	80010b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 ff8c 	bl	8003fce <USB_DevDisconnect>

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_PCD_Start+0x1c>
 80010d8:	2302      	movs	r3, #2
 80010da:	e022      	b.n	8001122 <HAL_PCD_Start+0x62>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d009      	beq.n	8001104 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fe93 	bl	8002e34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f002 ff3a 	bl	8003f8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800112a:	b590      	push	{r4, r7, lr}
 800112c:	b08d      	sub	sp, #52	; 0x34
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fff8 	bl	8004136 <USB_GetMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 848c 	bne.w	8001a66 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f002 ff5c 	bl	8004010 <USB_ReadInterrupts>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8482 	beq.w	8001a64 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 ff49 	bl	8004010 <USB_ReadInterrupts>
 800117e:	4603      	mov	r3, r0
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b02      	cmp	r3, #2
 8001186:	d107      	bne.n	8001198 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f002 0202 	and.w	r2, r2, #2
 8001196:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f002 ff37 	bl	8004010 <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d161      	bne.n	8001270 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0210 	bic.w	r2, r2, #16
 80011ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	f003 020f 	and.w	r2, r3, #15
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	3304      	adds	r3, #4
 80011da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	0c5b      	lsrs	r3, r3, #17
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d124      	bne.n	8001232 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d035      	beq.n	8001260 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001202:	b29b      	uxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	6a38      	ldr	r0, [r7, #32]
 8001208:	f002 fd6e 	bl	8003ce8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001218:	441a      	add	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800122a:	441a      	add	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	e016      	b.n	8001260 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	0c5b      	lsrs	r3, r3, #17
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	2b06      	cmp	r3, #6
 800123c:	d110      	bne.n	8001260 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001244:	2208      	movs	r2, #8
 8001246:	4619      	mov	r1, r3
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f002 fd4d 	bl	8003ce8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800125a:	441a      	add	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0210 	orr.w	r2, r2, #16
 800126e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fecb 	bl	8004010 <USB_ReadInterrupts>
 800127a:	4603      	mov	r3, r0
 800127c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001280:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001284:	f040 80a7 	bne.w	80013d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fed0 	bl	8004036 <USB_ReadDevAllOutEpInterrupt>
 8001296:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001298:	e099      	b.n	80013ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 808e 	beq.w	80013c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fef4 	bl	800409e <USB_ReadDevOutEPInterrupt>
 80012b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ce:	461a      	mov	r2, r3
 80012d0:	2301      	movs	r3, #1
 80012d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fea4 	bl	8002024 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00c      	beq.n	8001300 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f2:	461a      	mov	r2, r3
 80012f4:	2308      	movs	r3, #8
 80012f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 ff7a 	bl	80021f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	d008      	beq.n	800131c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	015a      	lsls	r2, r3, #5
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	4413      	add	r3, r2
 8001312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001316:	461a      	mov	r2, r3
 8001318:	2310      	movs	r3, #16
 800131a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d030      	beq.n	8001388 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	2b80      	cmp	r3, #128	; 0x80
 8001330:	d109      	bne.n	8001346 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001344:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	78db      	ldrb	r3, [r3, #3]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2200      	movs	r2, #0
 8001368:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f005 fa7d 	bl	8006870 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001382:	461a      	mov	r2, r3
 8001384:	2302      	movs	r3, #2
 8001386:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	015a      	lsls	r2, r3, #5
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139e:	461a      	mov	r2, r3
 80013a0:	2320      	movs	r3, #32
 80013a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	3301      	adds	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f47f af62 	bne.w	800129a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fe18 	bl	8004010 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013ea:	f040 80db 	bne.w	80015a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fe39 	bl	800406a <USB_ReadDevAllInEpInterrupt>
 80013f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013fe:	e0cd      	b.n	800159c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80c2 	beq.w	8001590 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fe5f 	bl	80040da <USB_ReadDevInEPInterrupt>
 800141c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d057      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	2201      	movs	r2, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800143c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	69f9      	ldr	r1, [r7, #28]
 8001444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001448:	4013      	ands	r3, r2
 800144a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001458:	461a      	mov	r2, r3
 800145a:	2301      	movs	r3, #1
 800145c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	799b      	ldrb	r3, [r3, #6]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d132      	bne.n	80014cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3320      	adds	r3, #32
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4403      	add	r3, r0
 8001486:	331c      	adds	r3, #28
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4419      	add	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4403      	add	r3, r0
 800149a:	3320      	adds	r3, #32
 800149c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d113      	bne.n	80014cc <HAL_PCD_IRQHandler+0x3a2>
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3324      	adds	r3, #36	; 0x24
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d108      	bne.n	80014cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80014c4:	461a      	mov	r2, r3
 80014c6:	2101      	movs	r1, #1
 80014c8:	f002 fe66 	bl	8004198 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f005 f947 	bl	8006766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ee:	461a      	mov	r2, r3
 80014f0:	2308      	movs	r3, #8
 80014f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800150a:	461a      	mov	r2, r3
 800150c:	2310      	movs	r3, #16
 800150e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4413      	add	r3, r2
 8001522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001526:	461a      	mov	r2, r3
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d023      	beq.n	800157e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001538:	6a38      	ldr	r0, [r7, #32]
 800153a:	f001 fe4d 	bl	80031d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	3310      	adds	r3, #16
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	3304      	adds	r3, #4
 8001550:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2200      	movs	r2, #0
 800155e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f005 f994 	bl	8006894 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001578:	461a      	mov	r2, r3
 800157a:	2302      	movs	r3, #2
 800157c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fcbd 	bl	8001f0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3301      	adds	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f af2e 	bne.w	8001400 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fd31 	bl	8004010 <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b8:	d122      	bne.n	8001600 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d108      	bne.n	80015ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015e0:	2100      	movs	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fea4 	bl	8002330 <HAL_PCDEx_LPM_Callback>
 80015e8:	e002      	b.n	80015f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f005 f932 	bl	8006854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fd03 	bl	8004010 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001614:	d112      	bne.n	800163c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f005 f8ee 	bl	8006808 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800163a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fce5 	bl	8004010 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001650:	f040 80b7 	bne.w	80017c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2110      	movs	r1, #16
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fdb2 	bl	80031d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001678:	e046      	b.n	8001708 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800168c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	0151      	lsls	r1, r2, #5
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	440a      	add	r2, r1
 80016a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ba:	461a      	mov	r2, r3
 80016bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d2:	0151      	lsls	r1, r2, #5
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	440a      	add	r2, r1
 80016d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	440a      	add	r2, r1
 80016f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001700:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	3301      	adds	r3, #1
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	791b      	ldrb	r3, [r3, #4]
 800170c:	461a      	mov	r2, r3
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	4293      	cmp	r3, r2
 8001712:	d3b2      	bcc.n	800167a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001722:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001726:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7bdb      	ldrb	r3, [r3, #15]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d016      	beq.n	800175e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001740:	f043 030b 	orr.w	r3, r3, #11
 8001744:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001756:	f043 030b 	orr.w	r3, r3, #11
 800175a:	6453      	str	r3, [r2, #68]	; 0x44
 800175c:	e015      	b.n	800178a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001770:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001774:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001784:	f043 030b 	orr.w	r3, r3, #11
 8001788:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001798:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800179c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ac:	461a      	mov	r2, r3
 80017ae:	f002 fcf3 	bl	8004198 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fc22 	bl	8004010 <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d6:	d123      	bne.n	8001820 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fcb8 	bl	8004152 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fd6f 	bl	80032ca <USB_GetDevSpeed>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681c      	ldr	r4, [r3, #0]
 80017f8:	f001 fa0a 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 80017fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001802:	461a      	mov	r2, r3
 8001804:	4620      	mov	r0, r4
 8001806:	f001 fa73 	bl	8002cf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f004 ffd3 	bl	80067b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800181e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fbf3 	bl	8004010 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b08      	cmp	r3, #8
 8001832:	d10a      	bne.n	800184a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f004 ffb0 	bl	800679a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f002 0208 	and.w	r2, r2, #8
 8001848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fbde 	bl	8004010 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185a:	2b80      	cmp	r3, #128	; 0x80
 800185c:	d123      	bne.n	80018a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800186a:	2301      	movs	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
 800186e:	e014      	b.n	800189a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	b2db      	uxtb	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fb0a 	bl	8001ea8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	3301      	adds	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	461a      	mov	r2, r3
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d3e4      	bcc.n	8001870 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fbb0 	bl	8004010 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ba:	d13c      	bne.n	8001936 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018bc:	2301      	movs	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	e02b      	b.n	800191a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3318      	adds	r3, #24
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d115      	bne.n	8001914 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da12      	bge.n	8001914 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3317      	adds	r3, #23
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 faca 	bl	8001ea8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	3301      	adds	r3, #1
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	4293      	cmp	r3, r2
 8001924:	d3cd      	bcc.n	80018c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fb68 	bl	8004010 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800194a:	d156      	bne.n	80019fa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800194c:	2301      	movs	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	e045      	b.n	80019de <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d12e      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800197a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800197c:	2b00      	cmp	r3, #0
 800197e:	da2b      	bge.n	80019d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800198c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001990:	429a      	cmp	r2, r3
 8001992:	d121      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d4:	6053      	str	r3, [r2, #4]
            break;
 80019d6:	e008      	b.n	80019ea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3301      	adds	r3, #1
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d3b3      	bcc.n	8001952 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fb06 	bl	8004010 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0e:	d10a      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f004 ff51 	bl	80068b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 faf0 	bl	8004010 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d115      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f004 ff41 	bl	80068d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	e000      	b.n	8001a66 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a64:	bf00      	nop
    }
  }
}
 8001a66:	3734      	adds	r7, #52	; 0x34
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_PCD_SetAddress+0x1a>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e012      	b.n	8001aac <HAL_PCD_SetAddress+0x40>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fa4f 	bl	8003f40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	70fb      	strb	r3, [r7, #3]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	803b      	strh	r3, [r7, #0]
 8001aca:	4613      	mov	r3, r2
 8001acc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da0f      	bge.n	8001afa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	3310      	adds	r3, #16
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	705a      	strb	r2, [r3, #1]
 8001af8:	e00f      	b.n	8001b1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 020f 	and.w	r2, r3, #15
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	78ba      	ldrb	r2, [r7, #2]
 8001b34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b48:	78bb      	ldrb	r3, [r7, #2]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_EP_Open+0xae>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e00e      	b.n	8001b80 <HAL_PCD_EP_Open+0xcc>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fbcf 	bl	8003314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0f      	bge.n	8001bbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	3310      	adds	r3, #16
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	705a      	strb	r2, [r3, #1]
 8001bba:	e00f      	b.n	8001bdc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_Close+0x6e>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e00e      	b.n	8001c14 <HAL_PCD_EP_Close+0x8c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fc0d 	bl	8003424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2200      	movs	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	799b      	ldrb	r3, [r3, #6]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	799b      	ldrb	r3, [r3, #6]
 8001c80:	461a      	mov	r2, r3
 8001c82:	6979      	ldr	r1, [r7, #20]
 8001c84:	f001 fcaa 	bl	80035dc <USB_EPStartXfer>

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 020f 	and.w	r2, r3, #15
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001cb4:	681b      	ldr	r3, [r3, #0]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3310      	adds	r3, #16
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	799b      	ldrb	r3, [r3, #6]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d102      	bne.n	8001d1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	799b      	ldrb	r3, [r3, #6]
 8001d24:	461a      	mov	r2, r3
 8001d26:	6979      	ldr	r1, [r7, #20]
 8001d28:	f001 fc58 	bl	80035dc <USB_EPStartXfer>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	7912      	ldrb	r2, [r2, #4]
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04f      	b.n	8001df4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	da0f      	bge.n	8001d7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3310      	adds	r3, #16
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	705a      	strb	r2, [r3, #1]
 8001d7a:	e00d      	b.n	8001d98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_EP_SetStall+0x82>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e01d      	b.n	8001df4 <HAL_PCD_EP_SetStall+0xbe>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 ffe6 	bl	8003d98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7999      	ldrb	r1, [r3, #6]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001de4:	461a      	mov	r2, r3
 8001de6:	f002 f9d7 	bl	8004198 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7912      	ldrb	r2, [r2, #4]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e042      	b.n	8001ea0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da0f      	bge.n	8001e42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3310      	adds	r3, #16
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	705a      	strb	r2, [r3, #1]
 8001e40:	e00f      	b.n	8001e62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_EP_ClrStall+0x86>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e00e      	b.n	8001ea0 <HAL_PCD_EP_ClrStall+0xa4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 ffef 	bl	8003e74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0c      	bge.n	8001ed6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3310      	adds	r3, #16
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	e00c      	b.n	8001ef0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fe0e 	bl	8003b18 <USB_EPStopXfer>
 8001efc:	4603      	mov	r3, r0
 8001efe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f00:	7afb      	ldrb	r3, [r7, #11]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b08a      	sub	sp, #40	; 0x28
 8001f0e:	af02      	add	r7, sp, #8
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	3310      	adds	r3, #16
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d901      	bls.n	8001f42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d902      	bls.n	8001f5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3303      	adds	r3, #3
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f66:	e02a      	b.n	8001fbe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d902      	bls.n	8001f84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3303      	adds	r3, #3
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68d9      	ldr	r1, [r3, #12]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f001 fe63 	bl	8003c6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	441a      	add	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	441a      	add	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d809      	bhi.n	8001fe8 <PCD_WriteEmptyTxFifo+0xde>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d203      	bcs.n	8001fe8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1bf      	bne.n	8001f68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d811      	bhi.n	8002018 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	43db      	mvns	r3, r3
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002014:	4013      	ands	r3, r2
 8002016:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	333c      	adds	r3, #60	; 0x3c
 800203c:	3304      	adds	r3, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d17b      	bne.n	8002152 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d015      	beq.n	8002090 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4a61      	ldr	r2, [pc, #388]	; (80021ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	f240 80b9 	bls.w	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80b3 	beq.w	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002086:	461a      	mov	r2, r3
 8002088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208c:	6093      	str	r3, [r2, #8]
 800208e:	e0a7      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	2320      	movs	r3, #32
 80020aa:	6093      	str	r3, [r2, #8]
 80020ac:	e098      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 8093 	bne.w	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d90f      	bls.n	80020e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d8:	461a      	mov	r2, r3
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	e07e      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	0159      	lsls	r1, r3, #5
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	440b      	add	r3, r1
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d114      	bne.n	8002144 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800212c:	461a      	mov	r2, r3
 800212e:	2101      	movs	r1, #1
 8002130:	f002 f832 	bl	8004198 <USB_EP0_OutStart>
 8002134:	e006      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f004 faf0 	bl	8006730 <HAL_PCD_DataOutStageCallback>
 8002150:	e046      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d124      	bne.n	80021a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002170:	461a      	mov	r2, r3
 8002172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002176:	6093      	str	r3, [r2, #8]
 8002178:	e032      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002190:	461a      	mov	r2, r3
 8002192:	2320      	movs	r3, #32
 8002194:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f004 fac7 	bl	8006730 <HAL_PCD_DataOutStageCallback>
 80021a2:	e01d      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d114      	bne.n	80021d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80021cc:	461a      	mov	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f001 ffe2 	bl	8004198 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 faa8 	bl	8006730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	4f54300a 	.word	0x4f54300a
 80021f0:	4f54310a 	.word	0x4f54310a

080021f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	333c      	adds	r3, #60	; 0x3c
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <PCD_EP_OutSetupPacket_int+0x88>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d90e      	bls.n	8002248 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002246:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f004 fa5f 	bl	800670c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <PCD_EP_OutSetupPacket_int+0x88>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d90c      	bls.n	8002270 <PCD_EP_OutSetupPacket_int+0x7c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	799b      	ldrb	r3, [r3, #6]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002268:	461a      	mov	r2, r3
 800226a:	2101      	movs	r1, #1
 800226c:	f001 ff94 	bl	8004198 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	4f54300a 	.word	0x4f54300a

08002280 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
 800228c:	4613      	mov	r3, r2
 800228e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800229e:	883b      	ldrh	r3, [r7, #0]
 80022a0:	0419      	lsls	r1, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
 80022ac:	e028      	b.n	8002300 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4413      	add	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e00d      	b.n	80022de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	3340      	adds	r3, #64	; 0x40
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	3301      	adds	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3ec      	bcc.n	80022c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022e8:	883b      	ldrh	r3, [r7, #0]
 80022ea:	0418      	lsls	r0, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	4302      	orrs	r2, r0
 80022f8:	3340      	adds	r3, #64	; 0x40
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e267      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d075      	beq.n	8002452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00c      	beq.n	800238c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4b85      	ldr	r3, [pc, #532]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800237a:	2b08      	cmp	r3, #8
 800237c:	d112      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238a:	d10b      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05b      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d157      	bne.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e242      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x74>
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6f      	ldr	r2, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6c      	ldr	r2, [pc, #432]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0xb0>
 80023e0:	4b69      	ldr	r3, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a68      	ldr	r2, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80023f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fa48 	bl	8000894 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fa44 	bl	8000894 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e207      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0xc0>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fa34 	bl	8000894 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fa30 	bl	8000894 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1f3      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d063      	beq.n	8002526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002472:	2b08      	cmp	r3, #8
 8002474:	d11c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d116      	bne.n	80024b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e1c7      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	e03a      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCC_OscConfig+0x244>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe f9e9 	bl	8000894 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe f9e5 	bl	8000894 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1a8      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4925      	ldr	r1, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e015      	b.n	8002526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x244>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe f9c8 	bl	8000894 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002508:	f7fe f9c4 	bl	8000894 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e187      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d036      	beq.n	80025a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_RCC_OscConfig+0x248>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe f9a8 	bl	8000894 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe f9a4 	bl	8000894 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e167      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x240>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x200>
 8002566:	e01b      	b.n	80025a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x248>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe f991 	bl	8000894 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002574:	e00e      	b.n	8002594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7fe f98d 	bl	8000894 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d907      	bls.n	8002594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e150      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
 8002588:	40023800 	.word	0x40023800
 800258c:	42470000 	.word	0x42470000
 8002590:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ea      	bne.n	8002576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8097 	beq.w	80026dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10f      	bne.n	80025de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b7d      	ldr	r3, [pc, #500]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a7c      	ldr	r2, [pc, #496]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b7a      	ldr	r3, [pc, #488]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b74      	ldr	r3, [pc, #464]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a73      	ldr	r2, [pc, #460]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7fe f94d 	bl	8000894 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe f949 	bl	8000894 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e10c      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_OscConfig+0x474>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x2ea>
 8002624:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e01c      	b.n	800266c <HAL_RCC_OscConfig+0x324>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x30c>
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5e      	ldr	r2, [pc, #376]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x324>
 8002654:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	4b55      	ldr	r3, [pc, #340]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a54      	ldr	r2, [pc, #336]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe f90e 	bl	8000894 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe f90a 	bl	8000894 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0cb      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ee      	beq.n	800267c <HAL_RCC_OscConfig+0x334>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fe f8f8 	bl	8000894 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe f8f4 	bl	8000894 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0b5      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026be:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ee      	bne.n	80026a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	4a38      	ldr	r2, [pc, #224]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a1 	beq.w	8002828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d05c      	beq.n	80027ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d141      	bne.n	800277e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe f8c8 	bl	8000894 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe f8c4 	bl	8000894 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e087      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	3b01      	subs	r3, #1
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	491b      	ldr	r1, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe f89d 	bl	8000894 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe f899 	bl	8000894 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e05c      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x416>
 800277c:	e054      	b.n	8002828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_OscConfig+0x478>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe f886 	bl	8000894 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe f882 	bl	8000894 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e045      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_OscConfig+0x470>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x444>
 80027aa:	e03d      	b.n	8002828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e038      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000
 80027c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x4ec>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d028      	beq.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d121      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d11a      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d111      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	3b01      	subs	r3, #1
 800280e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0cc      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d90c      	bls.n	8002874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b8      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002896:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	494d      	ldr	r1, [pc, #308]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d044      	beq.n	8002958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d119      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e067      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4934      	ldr	r1, [pc, #208]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002928:	f7fd ffb4 	bl	8000894 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fd ffb0 	bl	8000894 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	429a      	cmp	r2, r3
 8002956:	d1eb      	bne.n	8002930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d20c      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e032      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029be:	f000 f821 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	490a      	ldr	r1, [pc, #40]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	5ccb      	ldrb	r3, [r1, r3]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd ff14 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08006d38 	.word	0x08006d38
 80029fc:	20000008 	.word	0x20000008
 8002a00:	2000000c 	.word	0x2000000c

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b094      	sub	sp, #80	; 0x50
 8002a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d00d      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x40>
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	f200 80e1 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x34>
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a36:	e0db      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3c:	e0db      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a3e:	4b73      	ldr	r3, [pc, #460]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a42:	e0d8      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d063      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	2200      	movs	r2, #0
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
 8002a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a76:	4622      	mov	r2, r4
 8002a78:	462b      	mov	r3, r5
 8002a7a:	f04f 0000 	mov.w	r0, #0
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a88:	0150      	lsls	r0, r2, #5
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4621      	mov	r1, r4
 8002a90:	1a51      	subs	r1, r2, r1
 8002a92:	6139      	str	r1, [r7, #16]
 8002a94:	4629      	mov	r1, r5
 8002a96:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	018b      	lsls	r3, r1, #6
 8002aac:	4651      	mov	r1, sl
 8002aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab2:	4651      	mov	r1, sl
 8002ab4:	018a      	lsls	r2, r1, #6
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8002abc:	4659      	mov	r1, fp
 8002abe:	eb63 0901 	sbc.w	r9, r3, r1
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad6:	4690      	mov	r8, r2
 8002ad8:	4699      	mov	r9, r3
 8002ada:	4623      	mov	r3, r4
 8002adc:	eb18 0303 	adds.w	r3, r8, r3
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	eb49 0303 	adc.w	r3, r9, r3
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002af6:	4629      	mov	r1, r5
 8002af8:	024b      	lsls	r3, r1, #9
 8002afa:	4621      	mov	r1, r4
 8002afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b00:	4621      	mov	r1, r4
 8002b02:	024a      	lsls	r2, r1, #9
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b14:	f7fd fb6a 	bl	80001ec <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b20:	e058      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	f04f 0000 	mov.w	r0, #0
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	0159      	lsls	r1, r3, #5
 8002b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4e:	0150      	lsls	r0, r2, #5
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4641      	mov	r1, r8
 8002b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b74:	ebb2 040a 	subs.w	r4, r2, sl
 8002b78:	eb63 050b 	sbc.w	r5, r3, fp
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	00eb      	lsls	r3, r5, #3
 8002b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8a:	00e2      	lsls	r2, r4, #3
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	461d      	mov	r5, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	18e3      	adds	r3, r4, r3
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	464b      	mov	r3, r9
 8002b98:	eb45 0303 	adc.w	r3, r5, r3
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002baa:	4629      	mov	r1, r5
 8002bac:	028b      	lsls	r3, r1, #10
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	028a      	lsls	r2, r1, #10
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	61fa      	str	r2, [r7, #28]
 8002bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc8:	f7fd fb10 	bl	80001ec <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3750      	adds	r7, #80	; 0x50
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	007a1200 	.word	0x007a1200

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000008 	.word	0x20000008

08002c28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c28:	b084      	sub	sp, #16
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	f107 001c 	add.w	r0, r7, #28
 8002c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d123      	bne.n	8002c8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 fae8 	bl	8004254 <USB_CoreReset>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e01b      	b.n	8002cc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f001 fadc 	bl	8004254 <USB_CoreReset>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ca0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cb4:	e005      	b.n	8002cc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002cc2:	7fbb      	ldrb	r3, [r7, #30]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10b      	bne.n	8002ce0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f043 0206 	orr.w	r2, r3, #6
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cec:	b004      	add	sp, #16
 8002cee:	4770      	bx	lr

08002cf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d165      	bne.n	8002dd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <USB_SetTurnaroundTime+0x11c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d906      	bls.n	8002d1a <USB_SetTurnaroundTime+0x2a>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <USB_SetTurnaroundTime+0x120>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d202      	bcs.n	8002d1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d14:	230f      	movs	r3, #15
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e062      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <USB_SetTurnaroundTime+0x120>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d306      	bcc.n	8002d30 <USB_SetTurnaroundTime+0x40>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <USB_SetTurnaroundTime+0x124>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d202      	bcs.n	8002d30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d2a:	230e      	movs	r3, #14
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e057      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <USB_SetTurnaroundTime+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d306      	bcc.n	8002d46 <USB_SetTurnaroundTime+0x56>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a37      	ldr	r2, [pc, #220]	; (8002e18 <USB_SetTurnaroundTime+0x128>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d202      	bcs.n	8002d46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d40:	230d      	movs	r3, #13
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e04c      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a33      	ldr	r2, [pc, #204]	; (8002e18 <USB_SetTurnaroundTime+0x128>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d306      	bcc.n	8002d5c <USB_SetTurnaroundTime+0x6c>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <USB_SetTurnaroundTime+0x12c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d802      	bhi.n	8002d5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d56:	230c      	movs	r3, #12
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e041      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <USB_SetTurnaroundTime+0x12c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d906      	bls.n	8002d72 <USB_SetTurnaroundTime+0x82>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <USB_SetTurnaroundTime+0x130>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d802      	bhi.n	8002d72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d6c:	230b      	movs	r3, #11
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e036      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <USB_SetTurnaroundTime+0x130>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d906      	bls.n	8002d88 <USB_SetTurnaroundTime+0x98>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <USB_SetTurnaroundTime+0x134>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d802      	bhi.n	8002d88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d82:	230a      	movs	r3, #10
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e02b      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <USB_SetTurnaroundTime+0x134>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d906      	bls.n	8002d9e <USB_SetTurnaroundTime+0xae>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <USB_SetTurnaroundTime+0x138>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d202      	bcs.n	8002d9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d98:	2309      	movs	r3, #9
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e020      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <USB_SetTurnaroundTime+0x138>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d306      	bcc.n	8002db4 <USB_SetTurnaroundTime+0xc4>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a20      	ldr	r2, [pc, #128]	; (8002e2c <USB_SetTurnaroundTime+0x13c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dae:	2308      	movs	r3, #8
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e015      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <USB_SetTurnaroundTime+0x13c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d906      	bls.n	8002dca <USB_SetTurnaroundTime+0xda>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <USB_SetTurnaroundTime+0x140>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d202      	bcs.n	8002dca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002dc4:	2307      	movs	r3, #7
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e00a      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002dca:	2306      	movs	r3, #6
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e007      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dd6:	2309      	movs	r3, #9
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e001      	b.n	8002de0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ddc:	2309      	movs	r3, #9
 8002dde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	00d8acbf 	.word	0x00d8acbf
 8002e10:	00e4e1c0 	.word	0x00e4e1c0
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	01067380 	.word	0x01067380
 8002e1c:	011a499f 	.word	0x011a499f
 8002e20:	01312cff 	.word	0x01312cff
 8002e24:	014ca43f 	.word	0x014ca43f
 8002e28:	016e3600 	.word	0x016e3600
 8002e2c:	01a6ab1f 	.word	0x01a6ab1f
 8002e30:	01e84800 	.word	0x01e84800

08002e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0201 	bic.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d115      	bne.n	8002ec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ea6:	200a      	movs	r0, #10
 8002ea8:	f7fd fd00 	bl	80008ac <HAL_Delay>
      ms += 10U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	330a      	adds	r3, #10
 8002eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f001 f93f 	bl	8004136 <USB_GetMode>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d01e      	beq.n	8002efc <USB_SetCurrentMode+0x84>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2bc7      	cmp	r3, #199	; 0xc7
 8002ec2:	d9f0      	bls.n	8002ea6 <USB_SetCurrentMode+0x2e>
 8002ec4:	e01a      	b.n	8002efc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d115      	bne.n	8002ef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ed8:	200a      	movs	r0, #10
 8002eda:	f7fd fce7 	bl	80008ac <HAL_Delay>
      ms += 10U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	330a      	adds	r3, #10
 8002ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f001 f926 	bl	8004136 <USB_GetMode>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <USB_SetCurrentMode+0x84>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2bc7      	cmp	r3, #199	; 0xc7
 8002ef4:	d9f0      	bls.n	8002ed8 <USB_SetCurrentMode+0x60>
 8002ef6:	e001      	b.n	8002efc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e005      	b.n	8002f08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2bc8      	cmp	r3, #200	; 0xc8
 8002f00:	d101      	bne.n	8002f06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f10:	b084      	sub	sp, #16
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e009      	b.n	8002f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3340      	adds	r3, #64	; 0x40
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3301      	adds	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0e      	cmp	r3, #14
 8002f48:	d9f2      	bls.n	8002f30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11c      	bne.n	8002f8c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8a:	e00b      	b.n	8002fa4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002faa:	461a      	mov	r2, r3
 8002fac:	2300      	movs	r3, #0
 8002fae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fb0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10d      	bne.n	8002fd4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f968 	bl	8003298 <USB_SetDevSpeed>
 8002fc8:	e008      	b.n	8002fdc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fca:	2101      	movs	r1, #1
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f963 	bl	8003298 <USB_SetDevSpeed>
 8002fd2:	e003      	b.n	8002fdc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fd4:	2103      	movs	r1, #3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f95e 	bl	8003298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fdc:	2110      	movs	r1, #16
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8fa 	bl	80031d8 <USB_FlushTxFifo>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f924 	bl	800323c <USB_FlushRxFifo>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003004:	461a      	mov	r2, r3
 8003006:	2300      	movs	r3, #0
 8003008:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003010:	461a      	mov	r2, r3
 8003012:	2300      	movs	r3, #0
 8003014:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301c:	461a      	mov	r2, r3
 800301e:	2300      	movs	r3, #0
 8003020:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e043      	b.n	80030b0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800303a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800303e:	d118      	bne.n	8003072 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e013      	b.n	8003084 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003068:	461a      	mov	r2, r3
 800306a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e008      	b.n	8003084 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307e:	461a      	mov	r2, r3
 8003080:	2300      	movs	r3, #0
 8003082:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003090:	461a      	mov	r2, r3
 8003092:	2300      	movs	r3, #0
 8003094:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a2:	461a      	mov	r2, r3
 80030a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	3301      	adds	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030b4:	461a      	mov	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d3b5      	bcc.n	8003028 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e043      	b.n	800314a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d8:	d118      	bne.n	800310c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	461a      	mov	r2, r3
 80030ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e013      	b.n	800311e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e008      	b.n	800311e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	2300      	movs	r3, #0
 800311c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3301      	adds	r3, #1
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800314e:	461a      	mov	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4293      	cmp	r3, r2
 8003154:	d3b5      	bcc.n	80030c2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003168:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003176:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f043 0210 	orr.w	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <USB_DevInit+0x2c4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003198:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f043 0208 	orr.w	r2, r3, #8
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031d0:	b004      	add	sp, #16
 80031d2:	4770      	bx	lr
 80031d4:	803c3800 	.word	0x803c3800

080031d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80031f2:	d901      	bls.n	80031f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e01b      	b.n	8003230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	daf2      	bge.n	80031e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	019b      	lsls	r3, r3, #6
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800321c:	d901      	bls.n	8003222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e006      	b.n	8003230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	d0f0      	beq.n	8003210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003254:	d901      	bls.n	800325a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e018      	b.n	800328c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	daf2      	bge.n	8003248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2210      	movs	r2, #16
 800326a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003278:	d901      	bls.n	800327e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e006      	b.n	800328c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d0f0      	beq.n	800326c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b087      	sub	sp, #28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0306 	and.w	r3, r3, #6
 80032e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
 80032ee:	e00a      	b.n	8003306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d002      	beq.n	80032fc <USB_GetDevSpeed+0x32>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b06      	cmp	r3, #6
 80032fa:	d102      	bne.n	8003302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032fc:	2302      	movs	r3, #2
 80032fe:	75fb      	strb	r3, [r7, #23]
 8003300:	e001      	b.n	8003306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003302:	230f      	movs	r3, #15
 8003304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d13a      	bne.n	80033a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800334e:	4313      	orrs	r3, r2
 8003350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d155      	bne.n	8003414 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	059b      	lsls	r3, r3, #22
 800338a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800338c:	4313      	orrs	r3, r2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	440a      	add	r2, r1
 8003396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e036      	b.n	8003414 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	041b      	lsls	r3, r3, #16
 80033be:	68f9      	ldr	r1, [r7, #12]
 80033c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11a      	bne.n	8003414 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033fa:	430b      	orrs	r3, r1
 80033fc:	4313      	orrs	r3, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	0151      	lsls	r1, r2, #5
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	440a      	add	r2, r1
 8003406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003412:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d161      	bne.n	8003504 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003456:	d11f      	bne.n	8003498 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	440a      	add	r2, r1
 800346e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003476:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	440a      	add	r2, r1
 800348e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003496:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b8:	4013      	ands	r3, r2
 80034ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034dc:	4013      	ands	r3, r2
 80034de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0159      	lsls	r1, r3, #5
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fa:	4619      	mov	r1, r3
 80034fc:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <USB_DeactivateEndpoint+0x1b0>)
 80034fe:	4013      	ands	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
 8003502:	e060      	b.n	80035c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351a:	d11f      	bne.n	800355c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800353a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	0151      	lsls	r1, r2, #5
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	440a      	add	r2, r1
 8003552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800355a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	041b      	lsls	r3, r3, #16
 8003574:	43db      	mvns	r3, r3
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800357c:	4013      	ands	r3, r2
 800357e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	43db      	mvns	r3, r3
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a0:	4013      	ands	r3, r2
 80035a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	0159      	lsls	r1, r3, #5
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035be:	4619      	mov	r1, r3
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <USB_DeactivateEndpoint+0x1b4>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	ec337800 	.word	0xec337800
 80035d8:	eff37800 	.word	0xeff37800

080035dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 8180 	bne.w	80038fe <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d132      	bne.n	800366c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	0151      	lsls	r1, r2, #5
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	440a      	add	r2, r1
 800361c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	0151      	lsls	r1, r2, #5
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	440a      	add	r2, r1
 8003640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	0151      	lsls	r1, r2, #5
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	440a      	add	r2, r1
 8003660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003664:	0cdb      	lsrs	r3, r3, #19
 8003666:	04db      	lsls	r3, r3, #19
 8003668:	6113      	str	r3, [r2, #16]
 800366a:	e098      	b.n	800379e <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	440a      	add	r2, r1
 8003682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003686:	0cdb      	lsrs	r3, r3, #19
 8003688:	04db      	lsls	r3, r3, #19
 800368a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11a      	bne.n	80036ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d903      	bls.n	80036ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036e8:	6113      	str	r3, [r2, #16]
 80036ea:	e045      	b.n	8003778 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	8afb      	ldrh	r3, [r7, #22]
 8003712:	04db      	lsls	r3, r3, #19
 8003714:	4619      	mov	r1, r3
 8003716:	4ba4      	ldr	r3, [pc, #656]	; (80039a8 <USB_EPStartXfer+0x3cc>)
 8003718:	400b      	ands	r3, r1
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	0148      	lsls	r0, r1, #5
 800371e:	69f9      	ldr	r1, [r7, #28]
 8003720:	4401      	add	r1, r0
 8003722:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003726:	4313      	orrs	r3, r2
 8003728:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	791b      	ldrb	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d122      	bne.n	8003778 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003750:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	8afb      	ldrh	r3, [r7, #22]
 8003762:	075b      	lsls	r3, r3, #29
 8003764:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	0148      	lsls	r0, r1, #5
 800376c:	69f9      	ldr	r1, [r7, #28]
 800376e:	4401      	add	r1, r0
 8003770:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	0148      	lsls	r0, r1, #5
 8003792:	69f9      	ldr	r1, [r7, #28]
 8003794:	4401      	add	r1, r0
 8003796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d14b      	bne.n	800383c <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	791b      	ldrb	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d128      	bne.n	800381a <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e00f      	b.n	800381a <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	0151      	lsls	r1, r2, #5
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	440a      	add	r2, r1
 8003830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e165      	b.n	8003b08 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800385a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d015      	beq.n	8003890 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 814d 	beq.w	8003b08 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800388a:	4313      	orrs	r3, r2
 800388c:	634b      	str	r3, [r1, #52]	; 0x34
 800388e:	e13b      	b.n	8003b08 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d110      	bne.n	80038c2 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	0151      	lsls	r1, r2, #5
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	440a      	add	r2, r1
 80038b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e00f      	b.n	80038e2 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	68d9      	ldr	r1, [r3, #12]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	b298      	uxth	r0, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9b8 	bl	8003c6c <USB_WritePacket>
 80038fc:	e104      	b.n	8003b08 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003918:	0cdb      	lsrs	r3, r3, #19
 800391a:	04db      	lsls	r3, r3, #19
 800391c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	440a      	add	r2, r1
 8003934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800393c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003940:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d131      	bne.n	80039ac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003976:	69b9      	ldr	r1, [r7, #24]
 8003978:	0148      	lsls	r0, r1, #5
 800397a:	69f9      	ldr	r1, [r7, #28]
 800397c:	4401      	add	r1, r0
 800397e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003982:	4313      	orrs	r3, r2
 8003984:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	440a      	add	r2, r1
 800399c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a4:	6113      	str	r3, [r2, #16]
 80039a6:	e061      	b.n	8003a6c <USB_EPStartXfer+0x490>
 80039a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d123      	bne.n	80039fc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	69b9      	ldr	r1, [r7, #24]
 80039cc:	0148      	lsls	r0, r1, #5
 80039ce:	69f9      	ldr	r1, [r7, #28]
 80039d0:	4401      	add	r1, r0
 80039d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039d6:	4313      	orrs	r3, r2
 80039d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f8:	6113      	str	r3, [r2, #16]
 80039fa:	e037      	b.n	8003a6c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	8afa      	ldrh	r2, [r7, #22]
 8003a18:	fb03 f202 	mul.w	r2, r3, r2
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	04d9      	lsls	r1, r3, #19
 8003a32:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <USB_EPStartXfer+0x538>)
 8003a34:	400b      	ands	r3, r1
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	0148      	lsls	r0, r1, #5
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	4401      	add	r1, r0
 8003a3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a42:	4313      	orrs	r3, r2
 8003a44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	69b9      	ldr	r1, [r7, #24]
 8003a5e:	0148      	lsls	r0, r1, #5
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	4401      	add	r1, r0
 8003a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10d      	bne.n	8003a8e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	68d9      	ldr	r1, [r3, #12]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	791b      	ldrb	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d128      	bne.n	8003ae8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d110      	bne.n	8003ac8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e00f      	b.n	8003ae8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	0151      	lsls	r1, r2, #5
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	440a      	add	r2, r1
 8003afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	1ff80000 	.word	0x1ff80000

08003b18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d14a      	bne.n	8003bcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4e:	f040 8086 	bne.w	8003c5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d902      	bls.n	8003bb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
          break;
 8003bae:	e056      	b.n	8003c5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc8:	d0e7      	beq.n	8003b9a <USB_EPStopXfer+0x82>
 8003bca:	e048      	b.n	8003c5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be4:	d13b      	bne.n	8003c5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3301      	adds	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d902      	bls.n	8003c44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
          break;
 8003c42:	e00c      	b.n	8003c5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5c:	d0e7      	beq.n	8003c2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	71fb      	strb	r3, [r7, #7]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d123      	bne.n	8003cda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c92:	88bb      	ldrh	r3, [r7, #4]
 8003c94:	3303      	adds	r3, #3
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	e018      	b.n	8003cd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	031a      	lsls	r2, r3, #12
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cac:	461a      	mov	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d3e2      	bcc.n	8003ca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3724      	adds	r7, #36	; 0x24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08b      	sub	sp, #44	; 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	e014      	b.n	8003d3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	3301      	adds	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	3301      	adds	r3, #1
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	3301      	adds	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	3301      	adds	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3e6      	bcc.n	8003d14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d46:	8bfb      	ldrh	r3, [r7, #30]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01e      	beq.n	8003d8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d56:	461a      	mov	r2, r3
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	701a      	strb	r2, [r3, #0]
      i++;
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	3301      	adds	r3, #1
 8003d76:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d7e:	8bfb      	ldrh	r3, [r7, #30]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d84:	8bfb      	ldrh	r3, [r7, #30]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ea      	bne.n	8003d60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	372c      	adds	r7, #44	; 0x2c
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d12c      	bne.n	8003e0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	db12      	blt.n	8003dec <USB_EPSetStall+0x54>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00f      	beq.n	8003dec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e02b      	b.n	8003e66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db12      	blt.n	8003e46 <USB_EPSetStall+0xae>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00f      	beq.n	8003e46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d128      	bne.n	8003ee2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	791b      	ldrb	r3, [r3, #4]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d003      	beq.n	8003ec0 <USB_EPClearStall+0x4c>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d138      	bne.n	8003f32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e027      	b.n	8003f32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	791b      	ldrb	r3, [r3, #4]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d003      	beq.n	8003f12 <USB_EPClearStall+0x9e>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d10f      	bne.n	8003f32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fba:	f023 0302 	bic.w	r3, r3, #2
 8003fbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fe8:	f023 0303 	bic.w	r3, r3, #3
 8003fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004028:	68fb      	ldr	r3, [r7, #12]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	b29b      	uxth	r3, r3
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040cc:	68bb      	ldr	r3, [r7, #8]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	fa22 f303 	lsr.w	r3, r2, r3
 800410a:	01db      	lsls	r3, r3, #7
 800410c:	b2db      	uxtb	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004128:	68bb      	ldr	r3, [r7, #8]
}
 800412a:	4618      	mov	r0, r3
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0301 	and.w	r3, r3, #1
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	460b      	mov	r3, r1
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	333c      	adds	r3, #60	; 0x3c
 80041ae:	3304      	adds	r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <USB_EP0_OutStart+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d90a      	bls.n	80041d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041cc:	d101      	bne.n	80041d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e037      	b.n	8004242 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f043 0318 	orr.w	r3, r3, #24
 8004204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004214:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004218:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10f      	bne.n	8004240 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800423a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800423e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	4f54300a 	.word	0x4f54300a

08004254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800426c:	d901      	bls.n	8004272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e01b      	b.n	80042aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	daf2      	bge.n	8004260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004296:	d901      	bls.n	800429c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e006      	b.n	80042aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d0f0      	beq.n	800428a <USB_CoreReset+0x36>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80042c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80042c8:	f002 fc9c 	bl	8006c04 <USBD_static_malloc>
 80042cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	32b0      	adds	r2, #176	; 0xb0
 80042de:	2100      	movs	r1, #0
 80042e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80042e4:	2302      	movs	r3, #2
 80042e6:	e0d4      	b.n	8004492 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80042e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80042ec:	2100      	movs	r1, #0
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f002 fccc 	bl	8006c8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	32b0      	adds	r2, #176	; 0xb0
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	32b0      	adds	r2, #176	; 0xb0
 800430e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7c1b      	ldrb	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d138      	bne.n	8004392 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004320:	4b5e      	ldr	r3, [pc, #376]	; (800449c <USBD_CDC_Init+0x1e4>)
 8004322:	7819      	ldrb	r1, [r3, #0]
 8004324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004328:	2202      	movs	r2, #2
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f002 fb47 	bl	80069be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <USBD_CDC_Init+0x1e4>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2201      	movs	r2, #1
 8004348:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800434a:	4b55      	ldr	r3, [pc, #340]	; (80044a0 <USBD_CDC_Init+0x1e8>)
 800434c:	7819      	ldrb	r1, [r3, #0]
 800434e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004352:	2202      	movs	r2, #2
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f002 fb32 	bl	80069be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800435a:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <USBD_CDC_Init+0x1e8>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004372:	2201      	movs	r2, #1
 8004374:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004376:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <USBD_CDC_Init+0x1ec>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	3326      	adds	r3, #38	; 0x26
 800438c:	2210      	movs	r2, #16
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	e035      	b.n	80043fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004392:	4b42      	ldr	r3, [pc, #264]	; (800449c <USBD_CDC_Init+0x1e4>)
 8004394:	7819      	ldrb	r1, [r3, #0]
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	2202      	movs	r2, #2
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f002 fb0f 	bl	80069be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80043a0:	4b3e      	ldr	r3, [pc, #248]	; (800449c <USBD_CDC_Init+0x1e4>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	2201      	movs	r2, #1
 80043b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80043ba:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <USBD_CDC_Init+0x1e8>)
 80043bc:	7819      	ldrb	r1, [r3, #0]
 80043be:	2340      	movs	r3, #64	; 0x40
 80043c0:	2202      	movs	r2, #2
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f002 fafb 	bl	80069be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80043c8:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <USBD_CDC_Init+0x1e8>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80043e0:	2201      	movs	r2, #1
 80043e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80043e4:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <USBD_CDC_Init+0x1ec>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	3326      	adds	r3, #38	; 0x26
 80043fa:	2210      	movs	r2, #16
 80043fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <USBD_CDC_Init+0x1ec>)
 8004400:	7819      	ldrb	r1, [r3, #0]
 8004402:	2308      	movs	r3, #8
 8004404:	2203      	movs	r2, #3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f002 fad9 	bl	80069be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <USBD_CDC_Init+0x1ec>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3324      	adds	r3, #36	; 0x24
 8004422:	2201      	movs	r2, #1
 8004424:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	33b0      	adds	r3, #176	; 0xb0
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800445c:	2302      	movs	r3, #2
 800445e:	e018      	b.n	8004492 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7c1b      	ldrb	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <USBD_CDC_Init+0x1e8>)
 800446a:	7819      	ldrb	r1, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f002 fb90 	bl	8006b9c <USBD_LL_PrepareReceive>
 800447c:	e008      	b.n	8004490 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <USBD_CDC_Init+0x1e8>)
 8004480:	7819      	ldrb	r1, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f002 fb86 	bl	8006b9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000009b 	.word	0x2000009b
 80044a0:	2000009c 	.word	0x2000009c
 80044a4:	2000009d 	.word	0x2000009d

080044a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80044b4:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <USBD_CDC_DeInit+0xf8>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f002 faa5 	bl	8006a0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80044c0:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <USBD_CDC_DeInit+0xf8>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3324      	adds	r3, #36	; 0x24
 80044d6:	2200      	movs	r2, #0
 80044d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80044da:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <USBD_CDC_DeInit+0xfc>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f002 fa92 	bl	8006a0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80044e6:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <USBD_CDC_DeInit+0xfc>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80044fe:	2200      	movs	r2, #0
 8004500:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004502:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <USBD_CDC_DeInit+0x100>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f002 fa7e 	bl	8006a0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <USBD_CDC_DeInit+0x100>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	3324      	adds	r3, #36	; 0x24
 8004524:	2200      	movs	r2, #0
 8004526:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <USBD_CDC_DeInit+0x100>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f003 020f 	and.w	r2, r3, #15
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3326      	adds	r3, #38	; 0x26
 800453e:	2200      	movs	r2, #0
 8004540:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	32b0      	adds	r2, #176	; 0xb0
 800454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01f      	beq.n	8004594 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	33b0      	adds	r3, #176	; 0xb0
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	32b0      	adds	r2, #176	; 0xb0
 8004572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004576:	4618      	mov	r0, r3
 8004578:	f002 fb52 	bl	8006c20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	32b0      	adds	r2, #176	; 0xb0
 8004586:	2100      	movs	r1, #0
 8004588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2000009b 	.word	0x2000009b
 80045a4:	2000009c 	.word	0x2000009c
 80045a8:	2000009d 	.word	0x2000009d

080045ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	32b0      	adds	r2, #176	; 0xb0
 80045c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0bf      	b.n	800475c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d050      	beq.n	800468a <USBD_CDC_Setup+0xde>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	f040 80af 	bne.w	800474c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	88db      	ldrh	r3, [r3, #6]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d03a      	beq.n	800466c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da1b      	bge.n	8004638 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	33b0      	adds	r3, #176	; 0xb0
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004616:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	88d2      	ldrh	r2, [r2, #6]
 800461c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	88db      	ldrh	r3, [r3, #6]
 8004622:	2b07      	cmp	r3, #7
 8004624:	bf28      	it	cs
 8004626:	2307      	movcs	r3, #7
 8004628:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	89fa      	ldrh	r2, [r7, #14]
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 fd95 	bl	8006160 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004636:	e090      	b.n	800475a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	785a      	ldrb	r2, [r3, #1]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	88db      	ldrh	r3, [r3, #6]
 8004646:	2b3f      	cmp	r3, #63	; 0x3f
 8004648:	d803      	bhi.n	8004652 <USBD_CDC_Setup+0xa6>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	88db      	ldrh	r3, [r3, #6]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	e000      	b.n	8004654 <USBD_CDC_Setup+0xa8>
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004662:	461a      	mov	r2, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fda7 	bl	80061b8 <USBD_CtlPrepareRx>
      break;
 800466a:	e076      	b.n	800475a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	33b0      	adds	r3, #176	; 0xb0
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	7850      	ldrb	r0, [r2, #1]
 8004682:	2200      	movs	r2, #0
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	4798      	blx	r3
      break;
 8004688:	e067      	b.n	800475a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b0b      	cmp	r3, #11
 8004690:	d851      	bhi.n	8004736 <USBD_CDC_Setup+0x18a>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <USBD_CDC_Setup+0xec>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046c9 	.word	0x080046c9
 800469c:	08004745 	.word	0x08004745
 80046a0:	08004737 	.word	0x08004737
 80046a4:	08004737 	.word	0x08004737
 80046a8:	08004737 	.word	0x08004737
 80046ac:	08004737 	.word	0x08004737
 80046b0:	08004737 	.word	0x08004737
 80046b4:	08004737 	.word	0x08004737
 80046b8:	08004737 	.word	0x08004737
 80046bc:	08004737 	.word	0x08004737
 80046c0:	080046f3 	.word	0x080046f3
 80046c4:	0800471d 	.word	0x0800471d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d107      	bne.n	80046e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80046d4:	f107 030a 	add.w	r3, r7, #10
 80046d8:	2202      	movs	r2, #2
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 fd3f 	bl	8006160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046e2:	e032      	b.n	800474a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 fcbd 	bl	8006066 <USBD_CtlError>
            ret = USBD_FAIL;
 80046ec:	2303      	movs	r3, #3
 80046ee:	75fb      	strb	r3, [r7, #23]
          break;
 80046f0:	e02b      	b.n	800474a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d107      	bne.n	800470e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80046fe:	f107 030d 	add.w	r3, r7, #13
 8004702:	2201      	movs	r2, #1
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f001 fd2a 	bl	8006160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800470c:	e01d      	b.n	800474a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 fca8 	bl	8006066 <USBD_CtlError>
            ret = USBD_FAIL;
 8004716:	2303      	movs	r3, #3
 8004718:	75fb      	strb	r3, [r7, #23]
          break;
 800471a:	e016      	b.n	800474a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d00f      	beq.n	8004748 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fc9b 	bl	8006066 <USBD_CtlError>
            ret = USBD_FAIL;
 8004730:	2303      	movs	r3, #3
 8004732:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004734:	e008      	b.n	8004748 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f001 fc94 	bl	8006066 <USBD_CtlError>
          ret = USBD_FAIL;
 800473e:	2303      	movs	r3, #3
 8004740:	75fb      	strb	r3, [r7, #23]
          break;
 8004742:	e002      	b.n	800474a <USBD_CDC_Setup+0x19e>
          break;
 8004744:	bf00      	nop
 8004746:	e008      	b.n	800475a <USBD_CDC_Setup+0x1ae>
          break;
 8004748:	bf00      	nop
      }
      break;
 800474a:	e006      	b.n	800475a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 fc89 	bl	8006066 <USBD_CtlError>
      ret = USBD_FAIL;
 8004754:	2303      	movs	r3, #3
 8004756:	75fb      	strb	r3, [r7, #23]
      break;
 8004758:	bf00      	nop
  }

  return (uint8_t)ret;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004776:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	32b0      	adds	r2, #176	; 0xb0
 8004782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800478a:	2303      	movs	r3, #3
 800478c:	e065      	b.n	800485a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	32b0      	adds	r2, #176	; 0xb0
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3318      	adds	r3, #24
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02f      	beq.n	8004818 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	f003 020f 	and.w	r2, r3, #15
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	3318      	adds	r3, #24
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	78fb      	ldrb	r3, [r7, #3]
 80047d0:	f003 010f 	and.w	r1, r3, #15
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	460b      	mov	r3, r1
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	440b      	add	r3, r1
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4403      	add	r3, r0
 80047e0:	331c      	adds	r3, #28
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d112      	bne.n	8004818 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	3318      	adds	r3, #24
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800480a:	78f9      	ldrb	r1, [r7, #3]
 800480c:	2300      	movs	r3, #0
 800480e:	2200      	movs	r2, #0
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f002 f9a2 	bl	8006b5a <USBD_LL_Transmit>
 8004816:	e01f      	b.n	8004858 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	33b0      	adds	r3, #176	; 0xb0
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	33b0      	adds	r3, #176	; 0xb0
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	32b0      	adds	r2, #176	; 0xb0
 8004878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	32b0      	adds	r2, #176	; 0xb0
 8004888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004890:	2303      	movs	r3, #3
 8004892:	e01a      	b.n	80048ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f002 f9a0 	bl	8006bde <USBD_LL_GetRxDataSize>
 800489e:	4602      	mov	r2, r0
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	33b0      	adds	r3, #176	; 0xb0
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80048c4:	4611      	mov	r1, r2
 80048c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	32b0      	adds	r2, #176	; 0xb0
 80048e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e025      	b.n	8004940 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	33b0      	adds	r3, #176	; 0xb0
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01a      	beq.n	800493e <USBD_CDC_EP0_RxReady+0x6c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800490e:	2bff      	cmp	r3, #255	; 0xff
 8004910:	d015      	beq.n	800493e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	33b0      	adds	r3, #176	; 0xb0
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800492a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004932:	b292      	uxth	r2, r2
 8004934:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004950:	2182      	movs	r1, #130	; 0x82
 8004952:	4818      	ldr	r0, [pc, #96]	; (80049b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004954:	f000 fd4f 	bl	80053f6 <USBD_GetEpDesc>
 8004958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800495a:	2101      	movs	r1, #1
 800495c:	4815      	ldr	r0, [pc, #84]	; (80049b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800495e:	f000 fd4a 	bl	80053f6 <USBD_GetEpDesc>
 8004962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004964:	2181      	movs	r1, #129	; 0x81
 8004966:	4813      	ldr	r0, [pc, #76]	; (80049b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004968:	f000 fd45 	bl	80053f6 <USBD_GetEpDesc>
 800496c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2210      	movs	r2, #16
 8004978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2200      	movs	r2, #0
 8004984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004988:	711a      	strb	r2, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800499c:	711a      	strb	r2, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2243      	movs	r2, #67	; 0x43
 80049a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000058 	.word	0x20000058

080049b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049c0:	2182      	movs	r1, #130	; 0x82
 80049c2:	4818      	ldr	r0, [pc, #96]	; (8004a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049c4:	f000 fd17 	bl	80053f6 <USBD_GetEpDesc>
 80049c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049ca:	2101      	movs	r1, #1
 80049cc:	4815      	ldr	r0, [pc, #84]	; (8004a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049ce:	f000 fd12 	bl	80053f6 <USBD_GetEpDesc>
 80049d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049d4:	2181      	movs	r1, #129	; 0x81
 80049d6:	4813      	ldr	r0, [pc, #76]	; (8004a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049d8:	f000 fd0d 	bl	80053f6 <USBD_GetEpDesc>
 80049dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2210      	movs	r2, #16
 80049e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2200      	movs	r2, #0
 80049f4:	711a      	strb	r2, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f042 0202 	orr.w	r2, r2, #2
 80049fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	711a      	strb	r2, [r3, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f042 0202 	orr.w	r2, r2, #2
 8004a10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2243      	movs	r2, #67	; 0x43
 8004a16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000058 	.word	0x20000058

08004a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a30:	2182      	movs	r1, #130	; 0x82
 8004a32:	4818      	ldr	r0, [pc, #96]	; (8004a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a34:	f000 fcdf 	bl	80053f6 <USBD_GetEpDesc>
 8004a38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4815      	ldr	r0, [pc, #84]	; (8004a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a3e:	f000 fcda 	bl	80053f6 <USBD_GetEpDesc>
 8004a42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a44:	2181      	movs	r1, #129	; 0x81
 8004a46:	4813      	ldr	r0, [pc, #76]	; (8004a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a48:	f000 fcd5 	bl	80053f6 <USBD_GetEpDesc>
 8004a4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2210      	movs	r2, #16
 8004a58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a68:	711a      	strb	r2, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7c:	711a      	strb	r2, [r3, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2243      	movs	r2, #67	; 0x43
 8004a86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000058 	.word	0x20000058

08004a98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	220a      	movs	r2, #10
 8004aa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004aa6:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20000014 	.word	0x20000014

08004ab8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e009      	b.n	8004ae0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	33b0      	adds	r3, #176	; 0xb0
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	32b0      	adds	r2, #176	; 0xb0
 8004b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b06:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e008      	b.n	8004b24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	32b0      	adds	r2, #176	; 0xb0
 8004b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e004      	b.n	8004b5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	32b0      	adds	r2, #176	; 0xb0
 8004b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b82:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e025      	b.n	8004bde <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11f      	bne.n	8004bdc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <USBD_CDC_TransmitPacket+0x7c>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 020f 	and.w	r2, r3, #15
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4403      	add	r3, r0
 8004bbe:	3318      	adds	r3, #24
 8004bc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <USBD_CDC_TransmitPacket+0x7c>)
 8004bc4:	7819      	ldrb	r1, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f001 ffc1 	bl	8006b5a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000009b 	.word	0x2000009b

08004bec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	32b0      	adds	r2, #176	; 0xb0
 8004bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	32b0      	adds	r2, #176	; 0xb0
 8004c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e018      	b.n	8004c4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7c1b      	ldrb	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c22:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <USBD_CDC_ReceivePacket+0x68>)
 8004c24:	7819      	ldrb	r1, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 ffb3 	bl	8006b9c <USBD_LL_PrepareReceive>
 8004c36:	e008      	b.n	8004c4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <USBD_CDC_ReceivePacket+0x68>)
 8004c3a:	7819      	ldrb	r1, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f001 ffa9 	bl	8006b9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	2000009c 	.word	0x2000009c

08004c58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e01f      	b.n	8004cb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	79fa      	ldrb	r2, [r7, #7]
 8004ca2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f001 fe23 	bl	80068f0 <USBD_LL_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e025      	b.n	8004d1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	32ae      	adds	r2, #174	; 0xae
 8004ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00f      	beq.n	8004d0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	32ae      	adds	r2, #174	; 0xae
 8004cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	f107 020e 	add.w	r2, r7, #14
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 fe2b 	bl	8006988 <USBD_LL_Start>
 8004d32:	4603      	mov	r3, r0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d009      	beq.n	8004d80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	4611      	mov	r1, r2
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	4611      	mov	r1, r2
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004db0:	2303      	movs	r3, #3
 8004db2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 f90e 	bl	8005ff2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004de4:	461a      	mov	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d01a      	beq.n	8004e30 <USBD_LL_SetupStage+0x72>
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d822      	bhi.n	8004e44 <USBD_LL_SetupStage+0x86>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <USBD_LL_SetupStage+0x4a>
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d00a      	beq.n	8004e1c <USBD_LL_SetupStage+0x5e>
 8004e06:	e01d      	b.n	8004e44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fb65 	bl	80054e0 <USBD_StdDevReq>
 8004e16:	4603      	mov	r3, r0
 8004e18:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1a:	e020      	b.n	8004e5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fbcd 	bl	80055c4 <USBD_StdItfReq>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2e:	e016      	b.n	8004e5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fc2f 	bl	800569c <USBD_StdEPReq>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	73fb      	strb	r3, [r7, #15]
      break;
 8004e42:	e00c      	b.n	8004e5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 fdf8 	bl	8006a48 <USBD_LL_StallEP>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	bf00      	nop
  }

  return ret;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	460b      	mov	r3, r1
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004e7a:	7afb      	ldrb	r3, [r7, #11]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d16e      	bne.n	8004f5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	f040 8098 	bne.w	8004fc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d913      	bls.n	8004ec8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	1ad2      	subs	r2, r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	bf28      	it	cs
 8004eba:	4613      	movcs	r3, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f001 f996 	bl	80061f2 <USBD_CtlContinueRx>
 8004ec6:	e07d      	b.n	8004fc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d014      	beq.n	8004f00 <USBD_LL_DataOutStage+0x98>
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d81d      	bhi.n	8004f16 <USBD_LL_DataOutStage+0xae>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <USBD_LL_DataOutStage+0x7c>
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <USBD_LL_DataOutStage+0x82>
 8004ee2:	e018      	b.n	8004f16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75bb      	strb	r3, [r7, #22]
            break;
 8004ee8:	e018      	b.n	8004f1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fa64 	bl	80053c2 <USBD_CoreFindIF>
 8004efa:	4603      	mov	r3, r0
 8004efc:	75bb      	strb	r3, [r7, #22]
            break;
 8004efe:	e00d      	b.n	8004f1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa66 	bl	80053dc <USBD_CoreFindEP>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75bb      	strb	r3, [r7, #22]
            break;
 8004f14:	e002      	b.n	8004f1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75bb      	strb	r3, [r7, #22]
            break;
 8004f1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f1c:	7dbb      	ldrb	r3, [r7, #22]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d113      	bne.n	8004f56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f2e:	7dba      	ldrb	r2, [r7, #22]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	32ae      	adds	r2, #174	; 0xae
 8004f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004f3e:	7dba      	ldrb	r2, [r7, #22]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004f46:	7dba      	ldrb	r2, [r7, #22]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	32ae      	adds	r2, #174	; 0xae
 8004f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f001 f95c 	bl	8006214 <USBD_CtlSendStatus>
 8004f5c:	e032      	b.n	8004fc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fa37 	bl	80053dc <USBD_CoreFindEP>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f72:	7dbb      	ldrb	r3, [r7, #22]
 8004f74:	2bff      	cmp	r3, #255	; 0xff
 8004f76:	d025      	beq.n	8004fc4 <USBD_LL_DataOutStage+0x15c>
 8004f78:	7dbb      	ldrb	r3, [r7, #22]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d122      	bne.n	8004fc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d117      	bne.n	8004fba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004f8a:	7dba      	ldrb	r2, [r7, #22]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	32ae      	adds	r2, #174	; 0xae
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00f      	beq.n	8004fba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004f9a:	7dba      	ldrb	r2, [r7, #22]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004fa2:	7dba      	ldrb	r2, [r7, #22]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	32ae      	adds	r2, #174	; 0xae
 8004fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	7afa      	ldrb	r2, [r7, #11]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	4798      	blx	r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	e000      	b.n	8004fc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004fdc:	7afb      	ldrb	r3, [r7, #11]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d16f      	bne.n	80050c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d15a      	bne.n	80050a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d914      	bls.n	8005028 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	461a      	mov	r2, r3
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 f8be 	bl	8006196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800501a:	2300      	movs	r3, #0
 800501c:	2200      	movs	r2, #0
 800501e:	2100      	movs	r1, #0
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f001 fdbb 	bl	8006b9c <USBD_LL_PrepareReceive>
 8005026:	e03f      	b.n	80050a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	d11c      	bne.n	800506e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800503c:	429a      	cmp	r2, r3
 800503e:	d316      	bcc.n	800506e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800504a:	429a      	cmp	r2, r3
 800504c:	d20f      	bcs.n	800506e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800504e:	2200      	movs	r2, #0
 8005050:	2100      	movs	r1, #0
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f001 f89f 	bl	8006196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005060:	2300      	movs	r3, #0
 8005062:	2200      	movs	r2, #0
 8005064:	2100      	movs	r1, #0
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f001 fd98 	bl	8006b9c <USBD_LL_PrepareReceive>
 800506c:	e01c      	b.n	80050a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b03      	cmp	r3, #3
 8005078:	d10f      	bne.n	800509a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800509a:	2180      	movs	r1, #128	; 0x80
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f001 fcd3 	bl	8006a48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f001 f8c9 	bl	800623a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03a      	beq.n	8005128 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fe42 	bl	8004d3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80050c0:	e032      	b.n	8005128 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80050c2:	7afb      	ldrb	r3, [r7, #11]
 80050c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	4619      	mov	r1, r3
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f985 	bl	80053dc <USBD_CoreFindEP>
 80050d2:	4603      	mov	r3, r0
 80050d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	2bff      	cmp	r3, #255	; 0xff
 80050da:	d025      	beq.n	8005128 <USBD_LL_DataInStage+0x15a>
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d122      	bne.n	8005128 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d11c      	bne.n	8005128 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80050ee:	7dfa      	ldrb	r2, [r7, #23]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	32ae      	adds	r2, #174	; 0xae
 80050f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d014      	beq.n	8005128 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80050fe:	7dfa      	ldrb	r2, [r7, #23]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005106:	7dfa      	ldrb	r2, [r7, #23]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	32ae      	adds	r2, #174	; 0xae
 800510c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	7afa      	ldrb	r2, [r7, #11]
 8005114:	4611      	mov	r1, r2
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	4798      	blx	r3
 800511a:	4603      	mov	r3, r0
 800511c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800511e:	7dbb      	ldrb	r3, [r7, #22]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005124:	7dbb      	ldrb	r3, [r7, #22]
 8005126:	e000      	b.n	800512a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d014      	beq.n	8005198 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00e      	beq.n	8005198 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6852      	ldr	r2, [r2, #4]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	4611      	mov	r1, r2
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005194:	2303      	movs	r3, #3
 8005196:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fc0d 	bl	80069be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	2200      	movs	r2, #0
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 fbff 	bl	80069be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2240      	movs	r2, #64	; 0x40
 80051ca:	621a      	str	r2, [r3, #32]

  return ret;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b04      	cmp	r3, #4
 8005208:	d006      	beq.n	8005218 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005210:	b2da      	uxtb	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2204      	movs	r2, #4
 800521c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b04      	cmp	r3, #4
 8005240:	d106      	bne.n	8005250 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005248:	b2da      	uxtb	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b03      	cmp	r3, #3
 8005270:	d110      	bne.n	8005294 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	32ae      	adds	r2, #174	; 0xae
 80052b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	e01c      	b.n	80052fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d115      	bne.n	80052f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	32ae      	adds	r2, #174	; 0xae
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32ae      	adds	r2, #174	; 0xae
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	4611      	mov	r1, r2
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	32ae      	adds	r2, #174	; 0xae
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005320:	2303      	movs	r3, #3
 8005322:	e01c      	b.n	800535e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d115      	bne.n	800535c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	32ae      	adds	r2, #174	; 0xae
 800533a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	32ae      	adds	r2, #174	; 0xae
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	4611      	mov	r1, r2
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00e      	beq.n	80053b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6852      	ldr	r2, [r2, #4]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	4611      	mov	r1, r2
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4798      	blx	r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80053b4:	2303      	movs	r3, #3
 80053b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	885b      	ldrh	r3, [r3, #2]
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	429a      	cmp	r2, r3
 800541c:	d920      	bls.n	8005460 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005426:	e013      	b.n	8005450 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005428:	f107 030a 	add.w	r3, r7, #10
 800542c:	4619      	mov	r1, r3
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f000 f81b 	bl	800546a <USBD_GetNextDesc>
 8005434:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b05      	cmp	r3, #5
 800543c:	d108      	bne.n	8005450 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	789b      	ldrb	r3, [r3, #2]
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	429a      	cmp	r2, r3
 800544a:	d008      	beq.n	800545e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	885b      	ldrh	r3, [r3, #2]
 8005454:	b29a      	uxth	r2, r3
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	429a      	cmp	r2, r3
 800545a:	d8e5      	bhi.n	8005428 <USBD_GetEpDesc+0x32>
 800545c:	e000      	b.n	8005460 <USBD_GetEpDesc+0x6a>
          break;
 800545e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005460:	693b      	ldr	r3, [r7, #16]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	881a      	ldrh	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	4413      	add	r3, r2
 8005484:	b29a      	uxth	r2, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3301      	adds	r3, #1
 80054ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80054c2:	8a3b      	ldrh	r3, [r7, #16]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	b21a      	sxth	r2, r3
 80054c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80054d2:	89fb      	ldrh	r3, [r7, #14]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d005      	beq.n	8005506 <USBD_StdDevReq+0x26>
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d857      	bhi.n	80055ae <USBD_StdDevReq+0xce>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00f      	beq.n	8005522 <USBD_StdDevReq+0x42>
 8005502:	2b20      	cmp	r3, #32
 8005504:	d153      	bne.n	80055ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	32ae      	adds	r2, #174	; 0xae
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	4603      	mov	r3, r0
 800551e:	73fb      	strb	r3, [r7, #15]
      break;
 8005520:	e04a      	b.n	80055b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b09      	cmp	r3, #9
 8005528:	d83b      	bhi.n	80055a2 <USBD_StdDevReq+0xc2>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <USBD_StdDevReq+0x50>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005585 	.word	0x08005585
 8005534:	08005599 	.word	0x08005599
 8005538:	080055a3 	.word	0x080055a3
 800553c:	0800558f 	.word	0x0800558f
 8005540:	080055a3 	.word	0x080055a3
 8005544:	08005563 	.word	0x08005563
 8005548:	08005559 	.word	0x08005559
 800554c:	080055a3 	.word	0x080055a3
 8005550:	0800557b 	.word	0x0800557b
 8005554:	0800556d 	.word	0x0800556d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa3c 	bl	80059d8 <USBD_GetDescriptor>
          break;
 8005560:	e024      	b.n	80055ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fba1 	bl	8005cac <USBD_SetAddress>
          break;
 800556a:	e01f      	b.n	80055ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fbe0 	bl	8005d34 <USBD_SetConfig>
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
          break;
 8005578:	e018      	b.n	80055ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fc83 	bl	8005e88 <USBD_GetConfig>
          break;
 8005582:	e013      	b.n	80055ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fcb4 	bl	8005ef4 <USBD_GetStatus>
          break;
 800558c:	e00e      	b.n	80055ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fce3 	bl	8005f5c <USBD_SetFeature>
          break;
 8005596:	e009      	b.n	80055ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fd07 	bl	8005fae <USBD_ClrFeature>
          break;
 80055a0:	e004      	b.n	80055ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fd5e 	bl	8006066 <USBD_CtlError>
          break;
 80055aa:	bf00      	nop
      }
      break;
 80055ac:	e004      	b.n	80055b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fd58 	bl	8006066 <USBD_CtlError>
      break;
 80055b6:	bf00      	nop
  }

  return ret;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop

080055c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d005      	beq.n	80055ea <USBD_StdItfReq+0x26>
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d852      	bhi.n	8005688 <USBD_StdItfReq+0xc4>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <USBD_StdItfReq+0x26>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d14e      	bne.n	8005688 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d840      	bhi.n	800567a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	889b      	ldrh	r3, [r3, #4]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d836      	bhi.n	8005670 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	889b      	ldrh	r3, [r3, #4]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fed9 	bl	80053c2 <USBD_CoreFindIF>
 8005610:	4603      	mov	r3, r0
 8005612:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005614:	7bbb      	ldrb	r3, [r7, #14]
 8005616:	2bff      	cmp	r3, #255	; 0xff
 8005618:	d01d      	beq.n	8005656 <USBD_StdItfReq+0x92>
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d11a      	bne.n	8005656 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005620:	7bba      	ldrb	r2, [r7, #14]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	32ae      	adds	r2, #174	; 0xae
 8005626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00f      	beq.n	8005650 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005630:	7bba      	ldrb	r2, [r7, #14]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005638:	7bba      	ldrb	r2, [r7, #14]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	32ae      	adds	r2, #174	; 0xae
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800564e:	e004      	b.n	800565a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005650:	2303      	movs	r3, #3
 8005652:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005654:	e001      	b.n	800565a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005656:	2303      	movs	r3, #3
 8005658:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	88db      	ldrh	r3, [r3, #6]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d110      	bne.n	8005684 <USBD_StdItfReq+0xc0>
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fdd3 	bl	8006214 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800566e:	e009      	b.n	8005684 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fcf7 	bl	8006066 <USBD_CtlError>
          break;
 8005678:	e004      	b.n	8005684 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fcf2 	bl	8006066 <USBD_CtlError>
          break;
 8005682:	e000      	b.n	8005686 <USBD_StdItfReq+0xc2>
          break;
 8005684:	bf00      	nop
      }
      break;
 8005686:	e004      	b.n	8005692 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fceb 	bl	8006066 <USBD_CtlError>
      break;
 8005690:	bf00      	nop
  }

  return ret;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	889b      	ldrh	r3, [r3, #4]
 80056ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d007      	beq.n	80056cc <USBD_StdEPReq+0x30>
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	f200 817f 	bhi.w	80059c0 <USBD_StdEPReq+0x324>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02a      	beq.n	800571c <USBD_StdEPReq+0x80>
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	f040 817a 	bne.w	80059c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff fe83 	bl	80053dc <USBD_CoreFindEP>
 80056d6:	4603      	mov	r3, r0
 80056d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056da:	7b7b      	ldrb	r3, [r7, #13]
 80056dc:	2bff      	cmp	r3, #255	; 0xff
 80056de:	f000 8174 	beq.w	80059ca <USBD_StdEPReq+0x32e>
 80056e2:	7b7b      	ldrb	r3, [r7, #13]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 8170 	bne.w	80059ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80056ea:	7b7a      	ldrb	r2, [r7, #13]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80056f2:	7b7a      	ldrb	r2, [r7, #13]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	32ae      	adds	r2, #174	; 0xae
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8163 	beq.w	80059ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005704:	7b7a      	ldrb	r2, [r7, #13]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	32ae      	adds	r2, #174	; 0xae
 800570a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	4603      	mov	r3, r0
 8005718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800571a:	e156      	b.n	80059ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b03      	cmp	r3, #3
 8005722:	d008      	beq.n	8005736 <USBD_StdEPReq+0x9a>
 8005724:	2b03      	cmp	r3, #3
 8005726:	f300 8145 	bgt.w	80059b4 <USBD_StdEPReq+0x318>
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 809b 	beq.w	8005866 <USBD_StdEPReq+0x1ca>
 8005730:	2b01      	cmp	r3, #1
 8005732:	d03c      	beq.n	80057ae <USBD_StdEPReq+0x112>
 8005734:	e13e      	b.n	80059b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d002      	beq.n	8005748 <USBD_StdEPReq+0xac>
 8005742:	2b03      	cmp	r3, #3
 8005744:	d016      	beq.n	8005774 <USBD_StdEPReq+0xd8>
 8005746:	e02c      	b.n	80057a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <USBD_StdEPReq+0xce>
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d00a      	beq.n	800576a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 f975 	bl	8006a48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 f971 	bl	8006a48 <USBD_LL_StallEP>
 8005766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005768:	e020      	b.n	80057ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fc7a 	bl	8006066 <USBD_CtlError>
              break;
 8005772:	e01b      	b.n	80057ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10e      	bne.n	800579a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <USBD_StdEPReq+0xfe>
 8005782:	7bbb      	ldrb	r3, [r7, #14]
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d008      	beq.n	800579a <USBD_StdEPReq+0xfe>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	88db      	ldrh	r3, [r3, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 f957 	bl	8006a48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fd3a 	bl	8006214 <USBD_CtlSendStatus>

              break;
 80057a0:	e004      	b.n	80057ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fc5e 	bl	8006066 <USBD_CtlError>
              break;
 80057aa:	bf00      	nop
          }
          break;
 80057ac:	e107      	b.n	80059be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d002      	beq.n	80057c0 <USBD_StdEPReq+0x124>
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d016      	beq.n	80057ec <USBD_StdEPReq+0x150>
 80057be:	e04b      	b.n	8005858 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <USBD_StdEPReq+0x146>
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d00a      	beq.n	80057e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f939 	bl	8006a48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057d6:	2180      	movs	r1, #128	; 0x80
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 f935 	bl	8006a48 <USBD_LL_StallEP>
 80057de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057e0:	e040      	b.n	8005864 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fc3e 	bl	8006066 <USBD_CtlError>
              break;
 80057ea:	e03b      	b.n	8005864 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	885b      	ldrh	r3, [r3, #2]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d136      	bne.n	8005862 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80057fe:	7bbb      	ldrb	r3, [r7, #14]
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 f93f 	bl	8006a86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fd03 	bl	8006214 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fde2 	bl	80053dc <USBD_CoreFindEP>
 8005818:	4603      	mov	r3, r0
 800581a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800581c:	7b7b      	ldrb	r3, [r7, #13]
 800581e:	2bff      	cmp	r3, #255	; 0xff
 8005820:	d01f      	beq.n	8005862 <USBD_StdEPReq+0x1c6>
 8005822:	7b7b      	ldrb	r3, [r7, #13]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11c      	bne.n	8005862 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005828:	7b7a      	ldrb	r2, [r7, #13]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005830:	7b7a      	ldrb	r2, [r7, #13]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	32ae      	adds	r2, #174	; 0xae
 8005836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d010      	beq.n	8005862 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005840:	7b7a      	ldrb	r2, [r7, #13]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	32ae      	adds	r2, #174	; 0xae
 8005846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005856:	e004      	b.n	8005862 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fc03 	bl	8006066 <USBD_CtlError>
              break;
 8005860:	e000      	b.n	8005864 <USBD_StdEPReq+0x1c8>
              break;
 8005862:	bf00      	nop
          }
          break;
 8005864:	e0ab      	b.n	80059be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d002      	beq.n	8005878 <USBD_StdEPReq+0x1dc>
 8005872:	2b03      	cmp	r3, #3
 8005874:	d032      	beq.n	80058dc <USBD_StdEPReq+0x240>
 8005876:	e097      	b.n	80059a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005878:	7bbb      	ldrb	r3, [r7, #14]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <USBD_StdEPReq+0x1f2>
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	d004      	beq.n	800588e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fbed 	bl	8006066 <USBD_CtlError>
                break;
 800588c:	e091      	b.n	80059b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800588e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005892:	2b00      	cmp	r3, #0
 8005894:	da0b      	bge.n	80058ae <USBD_StdEPReq+0x212>
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	3310      	adds	r3, #16
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	3304      	adds	r3, #4
 80058ac:	e00b      	b.n	80058c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	4413      	add	r3, r2
 80058c4:	3304      	adds	r3, #4
 80058c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2202      	movs	r2, #2
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc43 	bl	8006160 <USBD_CtlSendData>
              break;
 80058da:	e06a      	b.n	80059b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da11      	bge.n	8005908 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d117      	bne.n	800592e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fbb0 	bl	8006066 <USBD_CtlError>
                  break;
 8005906:	e054      	b.n	80059b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	f003 020f 	and.w	r2, r3, #15
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fb9d 	bl	8006066 <USBD_CtlError>
                  break;
 800592c:	e041      	b.n	80059b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800592e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005932:	2b00      	cmp	r3, #0
 8005934:	da0b      	bge.n	800594e <USBD_StdEPReq+0x2b2>
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	3310      	adds	r3, #16
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	3304      	adds	r3, #4
 800594c:	e00b      	b.n	8005966 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800594e:	7bbb      	ldrb	r3, [r7, #14]
 8005950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	3304      	adds	r3, #4
 8005966:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <USBD_StdEPReq+0x2d8>
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d103      	bne.n	800597c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e00e      	b.n	800599a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 f89f 	bl	8006ac4 <USBD_LL_IsStallEP>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e002      	b.n	800599a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2202      	movs	r2, #2
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fbdd 	bl	8006160 <USBD_CtlSendData>
              break;
 80059a6:	e004      	b.n	80059b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fb5b 	bl	8006066 <USBD_CtlError>
              break;
 80059b0:	bf00      	nop
          }
          break;
 80059b2:	e004      	b.n	80059be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fb55 	bl	8006066 <USBD_CtlError>
          break;
 80059bc:	bf00      	nop
      }
      break;
 80059be:	e005      	b.n	80059cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fb4f 	bl	8006066 <USBD_CtlError>
      break;
 80059c8:	e000      	b.n	80059cc <USBD_StdEPReq+0x330>
      break;
 80059ca:	bf00      	nop
  }

  return ret;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	885b      	ldrh	r3, [r3, #2]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	f200 8128 	bhi.w	8005c4e <USBD_GetDescriptor+0x276>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <USBD_GetDescriptor+0x2c>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a21 	.word	0x08005a21
 8005a08:	08005a39 	.word	0x08005a39
 8005a0c:	08005a79 	.word	0x08005a79
 8005a10:	08005c4f 	.word	0x08005c4f
 8005a14:	08005c4f 	.word	0x08005c4f
 8005a18:	08005bef 	.word	0x08005bef
 8005a1c:	08005c1b 	.word	0x08005c1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	7c12      	ldrb	r2, [r2, #16]
 8005a2c:	f107 0108 	add.w	r1, r7, #8
 8005a30:	4610      	mov	r0, r2
 8005a32:	4798      	blx	r3
 8005a34:	60f8      	str	r0, [r7, #12]
      break;
 8005a36:	e112      	b.n	8005c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10d      	bne.n	8005a5c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	f107 0208 	add.w	r2, r7, #8
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4798      	blx	r3
 8005a50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	2202      	movs	r2, #2
 8005a58:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a5a:	e100      	b.n	8005c5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	f107 0208 	add.w	r2, r7, #8
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	2202      	movs	r2, #2
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	e0f2      	b.n	8005c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	885b      	ldrh	r3, [r3, #2]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	f200 80ac 	bhi.w	8005bdc <USBD_GetDescriptor+0x204>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <USBD_GetDescriptor+0xb4>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005aa5 	.word	0x08005aa5
 8005a90:	08005ad9 	.word	0x08005ad9
 8005a94:	08005b0d 	.word	0x08005b0d
 8005a98:	08005b41 	.word	0x08005b41
 8005a9c:	08005b75 	.word	0x08005b75
 8005aa0:	08005ba9 	.word	0x08005ba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	7c12      	ldrb	r2, [r2, #16]
 8005abc:	f107 0108 	add.w	r1, r7, #8
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
 8005ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ac6:	e091      	b.n	8005bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 facb 	bl	8006066 <USBD_CtlError>
            err++;
 8005ad0:	7afb      	ldrb	r3, [r7, #11]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ad6:	e089      	b.n	8005bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	7c12      	ldrb	r2, [r2, #16]
 8005af0:	f107 0108 	add.w	r1, r7, #8
 8005af4:	4610      	mov	r0, r2
 8005af6:	4798      	blx	r3
 8005af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005afa:	e077      	b.n	8005bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fab1 	bl	8006066 <USBD_CtlError>
            err++;
 8005b04:	7afb      	ldrb	r3, [r7, #11]
 8005b06:	3301      	adds	r3, #1
 8005b08:	72fb      	strb	r3, [r7, #11]
          break;
 8005b0a:	e06f      	b.n	8005bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	7c12      	ldrb	r2, [r2, #16]
 8005b24:	f107 0108 	add.w	r1, r7, #8
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
 8005b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b2e:	e05d      	b.n	8005bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa97 	bl	8006066 <USBD_CtlError>
            err++;
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b3e:	e055      	b.n	8005bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	7c12      	ldrb	r2, [r2, #16]
 8005b58:	f107 0108 	add.w	r1, r7, #8
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4798      	blx	r3
 8005b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b62:	e043      	b.n	8005bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa7d 	bl	8006066 <USBD_CtlError>
            err++;
 8005b6c:	7afb      	ldrb	r3, [r7, #11]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	72fb      	strb	r3, [r7, #11]
          break;
 8005b72:	e03b      	b.n	8005bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	7c12      	ldrb	r2, [r2, #16]
 8005b8c:	f107 0108 	add.w	r1, r7, #8
 8005b90:	4610      	mov	r0, r2
 8005b92:	4798      	blx	r3
 8005b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b96:	e029      	b.n	8005bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa63 	bl	8006066 <USBD_CtlError>
            err++;
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ba6:	e021      	b.n	8005bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	7c12      	ldrb	r2, [r2, #16]
 8005bc0:	f107 0108 	add.w	r1, r7, #8
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
 8005bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bca:	e00f      	b.n	8005bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa49 	bl	8006066 <USBD_CtlError>
            err++;
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bda:	e007      	b.n	8005bec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa41 	bl	8006066 <USBD_CtlError>
          err++;
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	3301      	adds	r3, #1
 8005be8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005bea:	bf00      	nop
      }
      break;
 8005bec:	e037      	b.n	8005c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7c1b      	ldrb	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	f107 0208 	add.w	r2, r7, #8
 8005c02:	4610      	mov	r0, r2
 8005c04:	4798      	blx	r3
 8005c06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c08:	e029      	b.n	8005c5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fa2a 	bl	8006066 <USBD_CtlError>
        err++;
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	3301      	adds	r3, #1
 8005c16:	72fb      	strb	r3, [r7, #11]
      break;
 8005c18:	e021      	b.n	8005c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	7c1b      	ldrb	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10d      	bne.n	8005c3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	f107 0208 	add.w	r2, r7, #8
 8005c2e:	4610      	mov	r0, r2
 8005c30:	4798      	blx	r3
 8005c32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	2207      	movs	r2, #7
 8005c3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c3c:	e00f      	b.n	8005c5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa10 	bl	8006066 <USBD_CtlError>
        err++;
 8005c46:	7afb      	ldrb	r3, [r7, #11]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c4c:	e007      	b.n	8005c5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fa08 	bl	8006066 <USBD_CtlError>
      err++;
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c5c:	bf00      	nop
  }

  if (err != 0U)
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11e      	bne.n	8005ca2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	88db      	ldrh	r3, [r3, #6]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d016      	beq.n	8005c9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00e      	beq.n	8005c90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	88da      	ldrh	r2, [r3, #6]
 8005c76:	893b      	ldrh	r3, [r7, #8]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bf28      	it	cs
 8005c7c:	4613      	movcs	r3, r2
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c82:	893b      	ldrh	r3, [r7, #8]
 8005c84:	461a      	mov	r2, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fa69 	bl	8006160 <USBD_CtlSendData>
 8005c8e:	e009      	b.n	8005ca4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9e7 	bl	8006066 <USBD_CtlError>
 8005c98:	e004      	b.n	8005ca4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 faba 	bl	8006214 <USBD_CtlSendStatus>
 8005ca0:	e000      	b.n	8005ca4 <USBD_GetDescriptor+0x2cc>
    return;
 8005ca2:	bf00      	nop
  }
}
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop

08005cac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	889b      	ldrh	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d131      	bne.n	8005d22 <USBD_SetAddress+0x76>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	88db      	ldrh	r3, [r3, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d12d      	bne.n	8005d22 <USBD_SetAddress+0x76>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	885b      	ldrh	r3, [r3, #2]
 8005cca:	2b7f      	cmp	r3, #127	; 0x7f
 8005ccc:	d829      	bhi.n	8005d22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	885b      	ldrh	r3, [r3, #2]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d104      	bne.n	8005cf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f9bc 	bl	8006066 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	e01d      	b.n	8005d2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7bfa      	ldrb	r2, [r7, #15]
 8005cf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 ff0d 	bl	8006b1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa86 	bl	8006214 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d16:	e009      	b.n	8005d2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d20:	e004      	b.n	8005d2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f99e 	bl	8006066 <USBD_CtlError>
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	885b      	ldrh	r3, [r3, #2]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b4e      	ldr	r3, [pc, #312]	; (8005e84 <USBD_SetConfig+0x150>)
 8005d4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <USBD_SetConfig+0x150>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d905      	bls.n	8005d60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f985 	bl	8006066 <USBD_CtlError>
    return USBD_FAIL;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e08c      	b.n	8005e7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d002      	beq.n	8005d72 <USBD_SetConfig+0x3e>
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d029      	beq.n	8005dc4 <USBD_SetConfig+0x90>
 8005d70:	e075      	b.n	8005e5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d72:	4b44      	ldr	r3, [pc, #272]	; (8005e84 <USBD_SetConfig+0x150>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d020      	beq.n	8005dbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005d7a:	4b42      	ldr	r3, [pc, #264]	; (8005e84 <USBD_SetConfig+0x150>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d84:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <USBD_SetConfig+0x150>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fe ffe1 	bl	8004d52 <USBD_SetClassConfig>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f962 	bl	8006066 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005daa:	e065      	b.n	8005e78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa31 	bl	8006214 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2203      	movs	r2, #3
 8005db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005dba:	e05d      	b.n	8005e78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa29 	bl	8006214 <USBD_CtlSendStatus>
      break;
 8005dc2:	e059      	b.n	8005e78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005dc4:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <USBD_SetConfig+0x150>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d112      	bne.n	8005df2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <USBD_SetConfig+0x150>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dde:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <USBD_SetConfig+0x150>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fe ffd0 	bl	8004d8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa12 	bl	8006214 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005df0:	e042      	b.n	8005e78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <USBD_SetConfig+0x150>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d02a      	beq.n	8005e56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fe ffbe 	bl	8004d8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <USBD_SetConfig+0x150>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <USBD_SetConfig+0x150>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fe ff97 	bl	8004d52 <USBD_SetClassConfig>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00f      	beq.n	8005e4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f918 	bl	8006066 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fe ffa3 	bl	8004d8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e4c:	e014      	b.n	8005e78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f9e0 	bl	8006214 <USBD_CtlSendStatus>
      break;
 8005e54:	e010      	b.n	8005e78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f9dc 	bl	8006214 <USBD_CtlSendStatus>
      break;
 8005e5c:	e00c      	b.n	8005e78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f900 	bl	8006066 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <USBD_SetConfig+0x150>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fe ff8c 	bl	8004d8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e72:	2303      	movs	r3, #3
 8005e74:	73fb      	strb	r3, [r7, #15]
      break;
 8005e76:	bf00      	nop
  }

  return ret;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000124 	.word	0x20000124

08005e88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	88db      	ldrh	r3, [r3, #6]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d004      	beq.n	8005ea4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f8e2 	bl	8006066 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ea2:	e023      	b.n	8005eec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	dc02      	bgt.n	8005eb6 <USBD_GetConfig+0x2e>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dc03      	bgt.n	8005ebc <USBD_GetConfig+0x34>
 8005eb4:	e015      	b.n	8005ee2 <USBD_GetConfig+0x5a>
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d00b      	beq.n	8005ed2 <USBD_GetConfig+0x4a>
 8005eba:	e012      	b.n	8005ee2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f948 	bl	8006160 <USBD_CtlSendData>
        break;
 8005ed0:	e00c      	b.n	8005eec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f940 	bl	8006160 <USBD_CtlSendData>
        break;
 8005ee0:	e004      	b.n	8005eec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f8be 	bl	8006066 <USBD_CtlError>
        break;
 8005eea:	bf00      	nop
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d81e      	bhi.n	8005f4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d004      	beq.n	8005f1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8a5 	bl	8006066 <USBD_CtlError>
        break;
 8005f1c:	e01a      	b.n	8005f54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f043 0202 	orr.w	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	2202      	movs	r2, #2
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f90c 	bl	8006160 <USBD_CtlSendData>
      break;
 8005f48:	e004      	b.n	8005f54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f88a 	bl	8006066 <USBD_CtlError>
      break;
 8005f52:	bf00      	nop
  }
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	885b      	ldrh	r3, [r3, #2]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d107      	bne.n	8005f7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f94c 	bl	8006214 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005f7c:	e013      	b.n	8005fa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d10b      	bne.n	8005f9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	889b      	ldrh	r3, [r3, #4]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f93c 	bl	8006214 <USBD_CtlSendStatus>
}
 8005f9c:	e003      	b.n	8005fa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f860 	bl	8006066 <USBD_CtlError>
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d80b      	bhi.n	8005fde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	885b      	ldrh	r3, [r3, #2]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d10c      	bne.n	8005fe8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f91c 	bl	8006214 <USBD_CtlSendStatus>
      }
      break;
 8005fdc:	e004      	b.n	8005fe8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f840 	bl	8006066 <USBD_CtlError>
      break;
 8005fe6:	e000      	b.n	8005fea <USBD_ClrFeature+0x3c>
      break;
 8005fe8:	bf00      	nop
  }
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff fa41 	bl	80054a4 <SWAPBYTE>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fa34 	bl	80054a4 <SWAPBYTE>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fa27 	bl	80054a4 <SWAPBYTE>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	80da      	strh	r2, [r3, #6]
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fce8 	bl	8006a48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006078:	2100      	movs	r1, #0
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fce4 	bl	8006a48 <USBD_LL_StallEP>
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d042      	beq.n	8006124 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80060a2:	6938      	ldr	r0, [r7, #16]
 80060a4:	f000 f842 	bl	800612c <USBD_GetLen>
 80060a8:	4603      	mov	r3, r0
 80060aa:	3301      	adds	r3, #1
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d808      	bhi.n	80060c6 <USBD_GetString+0x3e>
 80060b4:	6938      	ldr	r0, [r7, #16]
 80060b6:	f000 f839 	bl	800612c <USBD_GetLen>
 80060ba:	4603      	mov	r3, r0
 80060bc:	3301      	adds	r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	e001      	b.n	80060ca <USBD_GetString+0x42>
 80060c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	4413      	add	r3, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	3301      	adds	r3, #1
 80060de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4413      	add	r3, r2
 80060e6:	2203      	movs	r2, #3
 80060e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	3301      	adds	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060f0:	e013      	b.n	800611a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	4413      	add	r3, r2
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
    idx++;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	3301      	adds	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4413      	add	r3, r2
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
    idx++;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	3301      	adds	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e7      	bne.n	80060f2 <USBD_GetString+0x6a>
 8006122:	e000      	b.n	8006126 <USBD_GetString+0x9e>
    return;
 8006124:	bf00      	nop
  }
}
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800613c:	e005      	b.n	800614a <USBD_GetLen+0x1e>
  {
    len++;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	3301      	adds	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3301      	adds	r3, #1
 8006148:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f5      	bne.n	800613e <USBD_GetLen+0x12>
  }

  return len;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2202      	movs	r2, #2
 8006170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	2100      	movs	r1, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fce7 	bl	8006b5a <USBD_LL_Transmit>

  return USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	2100      	movs	r1, #0
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fcd6 	bl	8006b5a <USBD_LL_Transmit>

  return USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2203      	movs	r2, #3
 80061c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	2100      	movs	r1, #0
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fcda 	bl	8006b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	2100      	movs	r1, #0
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fcc9 	bl	8006b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2204      	movs	r2, #4
 8006220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006224:	2300      	movs	r3, #0
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fc95 	bl	8006b5a <USBD_LL_Transmit>

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2205      	movs	r2, #5
 8006246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800624a:	2300      	movs	r3, #0
 800624c:	2200      	movs	r2, #0
 800624e:	2100      	movs	r1, #0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fca3 	bl	8006b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006264:	2200      	movs	r2, #0
 8006266:	4912      	ldr	r1, [pc, #72]	; (80062b0 <MX_USB_DEVICE_Init+0x50>)
 8006268:	4812      	ldr	r0, [pc, #72]	; (80062b4 <MX_USB_DEVICE_Init+0x54>)
 800626a:	f7fe fcf5 	bl	8004c58 <USBD_Init>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006274:	f7fa fa0a 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006278:	490f      	ldr	r1, [pc, #60]	; (80062b8 <MX_USB_DEVICE_Init+0x58>)
 800627a:	480e      	ldr	r0, [pc, #56]	; (80062b4 <MX_USB_DEVICE_Init+0x54>)
 800627c:	f7fe fd1c 	bl	8004cb8 <USBD_RegisterClass>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006286:	f7fa fa01 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800628a:	490c      	ldr	r1, [pc, #48]	; (80062bc <MX_USB_DEVICE_Init+0x5c>)
 800628c:	4809      	ldr	r0, [pc, #36]	; (80062b4 <MX_USB_DEVICE_Init+0x54>)
 800628e:	f7fe fc13 	bl	8004ab8 <USBD_CDC_RegisterInterface>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006298:	f7fa f9f8 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <MX_USB_DEVICE_Init+0x54>)
 800629e:	f7fe fd41 	bl	8004d24 <USBD_Start>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062a8:	f7fa f9f0 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062ac:	bf00      	nop
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	200000b4 	.word	0x200000b4
 80062b4:	20000128 	.word	0x20000128
 80062b8:	20000020 	.word	0x20000020
 80062bc:	200000a0 	.word	0x200000a0

080062c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80062c4:	2200      	movs	r2, #0
 80062c6:	4905      	ldr	r1, [pc, #20]	; (80062dc <CDC_Init_FS+0x1c>)
 80062c8:	4805      	ldr	r0, [pc, #20]	; (80062e0 <CDC_Init_FS+0x20>)
 80062ca:	f7fe fc0f 	bl	8004aec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80062ce:	4905      	ldr	r1, [pc, #20]	; (80062e4 <CDC_Init_FS+0x24>)
 80062d0:	4803      	ldr	r0, [pc, #12]	; (80062e0 <CDC_Init_FS+0x20>)
 80062d2:	f7fe fc2d 	bl	8004b30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80062d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000c04 	.word	0x20000c04
 80062e0:	20000128 	.word	0x20000128
 80062e4:	20000404 	.word	0x20000404

080062e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
 8006304:	4613      	mov	r3, r2
 8006306:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	2b23      	cmp	r3, #35	; 0x23
 800630c:	d84a      	bhi.n	80063a4 <CDC_Control_FS+0xac>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <CDC_Control_FS+0x1c>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	080063a5 	.word	0x080063a5
 8006318:	080063a5 	.word	0x080063a5
 800631c:	080063a5 	.word	0x080063a5
 8006320:	080063a5 	.word	0x080063a5
 8006324:	080063a5 	.word	0x080063a5
 8006328:	080063a5 	.word	0x080063a5
 800632c:	080063a5 	.word	0x080063a5
 8006330:	080063a5 	.word	0x080063a5
 8006334:	080063a5 	.word	0x080063a5
 8006338:	080063a5 	.word	0x080063a5
 800633c:	080063a5 	.word	0x080063a5
 8006340:	080063a5 	.word	0x080063a5
 8006344:	080063a5 	.word	0x080063a5
 8006348:	080063a5 	.word	0x080063a5
 800634c:	080063a5 	.word	0x080063a5
 8006350:	080063a5 	.word	0x080063a5
 8006354:	080063a5 	.word	0x080063a5
 8006358:	080063a5 	.word	0x080063a5
 800635c:	080063a5 	.word	0x080063a5
 8006360:	080063a5 	.word	0x080063a5
 8006364:	080063a5 	.word	0x080063a5
 8006368:	080063a5 	.word	0x080063a5
 800636c:	080063a5 	.word	0x080063a5
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063a5 	.word	0x080063a5
 8006378:	080063a5 	.word	0x080063a5
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063a5 	.word	0x080063a5
 8006384:	080063a5 	.word	0x080063a5
 8006388:	080063a5 	.word	0x080063a5
 800638c:	080063a5 	.word	0x080063a5
 8006390:	080063a5 	.word	0x080063a5
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063a5 	.word	0x080063a5
 800639c:	080063a5 	.word	0x080063a5
 80063a0:	080063a5 	.word	0x080063a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80063a4:	bf00      	nop
  }

  return (USBD_OK);
 80063a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063be:	4804      	ldr	r0, [pc, #16]	; (80063d0 <CDC_Receive_FS+0x1c>)
 80063c0:	f7fe fc14 	bl	8004bec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80063c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000128 	.word	0x20000128

080063d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <CDC_Transmit_FS+0x48>)
 80063e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00b      	b.n	8006412 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063fa:	887b      	ldrh	r3, [r7, #2]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4806      	ldr	r0, [pc, #24]	; (800641c <CDC_Transmit_FS+0x48>)
 8006402:	f7fe fb73 	bl	8004aec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006406:	4805      	ldr	r0, [pc, #20]	; (800641c <CDC_Transmit_FS+0x48>)
 8006408:	f7fe fbb0 	bl	8004b6c <USBD_CDC_TransmitPacket>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000128 	.word	0x20000128

08006420 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006436:	4618      	mov	r0, r3
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	6039      	str	r1, [r7, #0]
 800644e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2212      	movs	r2, #18
 8006454:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	200000d0 	.word	0x200000d0

08006468 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2204      	movs	r2, #4
 8006478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	200000e4 	.word	0x200000e4

0800648c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4907      	ldr	r1, [pc, #28]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80064a2:	4808      	ldr	r0, [pc, #32]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a4:	f7ff fdf0 	bl	8006088 <USBD_GetString>
 80064a8:	e004      	b.n	80064b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80064b0:	f7ff fdea 	bl	8006088 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20001404 	.word	0x20001404
 80064c4:	08006cfc 	.word	0x08006cfc

080064c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	4904      	ldr	r1, [pc, #16]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064d8:	4804      	ldr	r0, [pc, #16]	; (80064ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064da:	f7ff fdd5 	bl	8006088 <USBD_GetString>
  return USBD_StrDesc;
 80064de:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20001404 	.word	0x20001404
 80064ec:	08006d08 	.word	0x08006d08

080064f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	221a      	movs	r2, #26
 8006500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006502:	f000 f843 	bl	800658c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006506:	4b02      	ldr	r3, [pc, #8]	; (8006510 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200000e8 	.word	0x200000e8

08006514 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800652a:	4808      	ldr	r0, [pc, #32]	; (800654c <USBD_FS_ConfigStrDescriptor+0x38>)
 800652c:	f7ff fdac 	bl	8006088 <USBD_GetString>
 8006530:	e004      	b.n	800653c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006536:	4805      	ldr	r0, [pc, #20]	; (800654c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006538:	f7ff fda6 	bl	8006088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20001404 	.word	0x20001404
 800654c:	08006d1c 	.word	0x08006d1c

08006550 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4907      	ldr	r1, [pc, #28]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006566:	4808      	ldr	r0, [pc, #32]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006568:	f7ff fd8e 	bl	8006088 <USBD_GetString>
 800656c:	e004      	b.n	8006578 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4904      	ldr	r1, [pc, #16]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006572:	4805      	ldr	r0, [pc, #20]	; (8006588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006574:	f7ff fd88 	bl	8006088 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006578:	4b02      	ldr	r3, [pc, #8]	; (8006584 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20001404 	.word	0x20001404
 8006588:	08006d28 	.word	0x08006d28

0800658c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <Get_SerialNum+0x44>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <Get_SerialNum+0x48>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <Get_SerialNum+0x4c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065b2:	2208      	movs	r2, #8
 80065b4:	4909      	ldr	r1, [pc, #36]	; (80065dc <Get_SerialNum+0x50>)
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f814 	bl	80065e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065bc:	2204      	movs	r2, #4
 80065be:	4908      	ldr	r1, [pc, #32]	; (80065e0 <Get_SerialNum+0x54>)
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f000 f80f 	bl	80065e4 <IntToUnicode>
  }
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	1fff7a10 	.word	0x1fff7a10
 80065d4:	1fff7a14 	.word	0x1fff7a14
 80065d8:	1fff7a18 	.word	0x1fff7a18
 80065dc:	200000ea 	.word	0x200000ea
 80065e0:	200000fa 	.word	0x200000fa

080065e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]
 80065fa:	e027      	b.n	800664c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	0f1b      	lsrs	r3, r3, #28
 8006600:	2b09      	cmp	r3, #9
 8006602:	d80b      	bhi.n	800661c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	0f1b      	lsrs	r3, r3, #28
 8006608:	b2da      	uxtb	r2, r3
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4619      	mov	r1, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	440b      	add	r3, r1
 8006614:	3230      	adds	r2, #48	; 0x30
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e00a      	b.n	8006632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	0f1b      	lsrs	r3, r3, #28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4619      	mov	r1, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	440b      	add	r3, r1
 800662c:	3237      	adds	r2, #55	; 0x37
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	3301      	adds	r3, #1
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	3301      	adds	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	7dfa      	ldrb	r2, [r7, #23]
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	429a      	cmp	r2, r3
 8006652:	d3d3      	bcc.n	80065fc <IntToUnicode+0x18>
  }
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006684:	d13a      	bne.n	80066fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6313      	str	r3, [r2, #48]	; 0x30
 8006696:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80066a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80066a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a8:	2302      	movs	r3, #2
 80066aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066b0:	2303      	movs	r3, #3
 80066b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066b4:	230a      	movs	r3, #10
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066b8:	f107 0314 	add.w	r3, r7, #20
 80066bc:	4619      	mov	r1, r3
 80066be:	4812      	ldr	r0, [pc, #72]	; (8006708 <HAL_PCD_MspInit+0xa4>)
 80066c0:	f7fa fa2a 	bl	8000b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	4a0e      	ldr	r2, [pc, #56]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	6353      	str	r3, [r2, #52]	; 0x34
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 80066da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066de:	6453      	str	r3, [r2, #68]	; 0x44
 80066e0:	4b08      	ldr	r3, [pc, #32]	; (8006704 <HAL_PCD_MspInit+0xa0>)
 80066e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066ec:	2200      	movs	r2, #0
 80066ee:	2100      	movs	r1, #0
 80066f0:	2043      	movs	r0, #67	; 0x43
 80066f2:	f7fa f9da 	bl	8000aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066f6:	2043      	movs	r0, #67	; 0x43
 80066f8:	f7fa f9f3 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066fc:	bf00      	nop
 80066fe:	3728      	adds	r7, #40	; 0x28
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40023800 	.word	0x40023800
 8006708:	40020000 	.word	0x40020000

0800670c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fb4b 	bl	8004dbe <USBD_LL_SetupStage>
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	4619      	mov	r1, r3
 800675a:	f7fe fb85 	bl	8004e68 <USBD_LL_DataOutStage>
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	3320      	adds	r3, #32
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	4619      	mov	r1, r3
 800678e:	f7fe fc1e 	bl	8004fce <USBD_LL_DataInStage>
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fd58 	bl	800525e <USBD_LL_SOF>
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	79db      	ldrb	r3, [r3, #7]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	e008      	b.n	80067e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	79db      	ldrb	r3, [r3, #7]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d102      	bne.n	80067de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	e001      	b.n	80067e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80067de:	f7f9 ff55 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067e8:	7bfa      	ldrb	r2, [r7, #15]
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fcf2 	bl	80051d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fc9a 	bl	8005132 <USBD_LL_Reset>
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fced 	bl	80051f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7adb      	ldrb	r3, [r3, #11]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <HAL_PCD_SuspendCallback+0x48>)
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4a03      	ldr	r2, [pc, #12]	; (8006850 <HAL_PCD_SuspendCallback+0x48>)
 8006842:	f043 0306 	orr.w	r3, r3, #6
 8006846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006848:	bf00      	nop
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	e000ed00 	.word	0xe000ed00

08006854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fce3 	bl	800522e <USBD_LL_Resume>
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fd3b 	bl	8005302 <USBD_LL_IsoOUTIncomplete>
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fcf7 	bl	800529e <USBD_LL_IsoINIncomplete>
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fd4d 	bl	8005366 <USBD_LL_DevConnected>
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fd4a 	bl	800537c <USBD_LL_DevDisconnected>
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d13c      	bne.n	800697a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006900:	4a20      	ldr	r2, [pc, #128]	; (8006984 <USBD_LL_Init+0x94>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <USBD_LL_Init+0x94>)
 800690c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006910:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <USBD_LL_Init+0x94>)
 8006912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006918:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <USBD_LL_Init+0x94>)
 800691a:	2204      	movs	r2, #4
 800691c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800691e:	4b19      	ldr	r3, [pc, #100]	; (8006984 <USBD_LL_Init+0x94>)
 8006920:	2202      	movs	r2, #2
 8006922:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <USBD_LL_Init+0x94>)
 8006926:	2200      	movs	r2, #0
 8006928:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800692a:	4b16      	ldr	r3, [pc, #88]	; (8006984 <USBD_LL_Init+0x94>)
 800692c:	2202      	movs	r2, #2
 800692e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006930:	4b14      	ldr	r3, [pc, #80]	; (8006984 <USBD_LL_Init+0x94>)
 8006932:	2201      	movs	r2, #1
 8006934:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006936:	4b13      	ldr	r3, [pc, #76]	; (8006984 <USBD_LL_Init+0x94>)
 8006938:	2200      	movs	r2, #0
 800693a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800693c:	4b11      	ldr	r3, [pc, #68]	; (8006984 <USBD_LL_Init+0x94>)
 800693e:	2200      	movs	r2, #0
 8006940:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <USBD_LL_Init+0x94>)
 8006944:	2200      	movs	r2, #0
 8006946:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006948:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <USBD_LL_Init+0x94>)
 800694a:	2200      	movs	r2, #0
 800694c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800694e:	480d      	ldr	r0, [pc, #52]	; (8006984 <USBD_LL_Init+0x94>)
 8006950:	f7fa faa7 	bl	8000ea2 <HAL_PCD_Init>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800695a:	f7f9 fe97 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800695e:	2180      	movs	r1, #128	; 0x80
 8006960:	4808      	ldr	r0, [pc, #32]	; (8006984 <USBD_LL_Init+0x94>)
 8006962:	f7fb fcd4 	bl	800230e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006966:	2240      	movs	r2, #64	; 0x40
 8006968:	2100      	movs	r1, #0
 800696a:	4806      	ldr	r0, [pc, #24]	; (8006984 <USBD_LL_Init+0x94>)
 800696c:	f7fb fc88 	bl	8002280 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006970:	2280      	movs	r2, #128	; 0x80
 8006972:	2101      	movs	r1, #1
 8006974:	4803      	ldr	r0, [pc, #12]	; (8006984 <USBD_LL_Init+0x94>)
 8006976:	f7fb fc83 	bl	8002280 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20001604 	.word	0x20001604

08006988 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fa fb8e 	bl	80010c0 <HAL_PCD_Start>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f942 	bl	8006c34 <USBD_Get_USB_Status>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	461a      	mov	r2, r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	70fb      	strb	r3, [r7, #3]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70bb      	strb	r3, [r7, #2]
 80069d4:	4613      	mov	r3, r2
 80069d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80069e6:	78bb      	ldrb	r3, [r7, #2]
 80069e8:	883a      	ldrh	r2, [r7, #0]
 80069ea:	78f9      	ldrb	r1, [r7, #3]
 80069ec:	f7fb f862 	bl	8001ab4 <HAL_PCD_EP_Open>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f91c 	bl	8006c34 <USBD_Get_USB_Status>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fb f8ad 	bl	8001b88 <HAL_PCD_EP_Close>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f8fd 	bl	8006c34 <USBD_Get_USB_Status>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a62:	78fa      	ldrb	r2, [r7, #3]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fb f965 	bl	8001d36 <HAL_PCD_EP_SetStall>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f8de 	bl	8006c34 <USBD_Get_USB_Status>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006aa0:	78fa      	ldrb	r2, [r7, #3]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fb f9a9 	bl	8001dfc <HAL_PCD_EP_ClrStall>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 f8bf 	bl	8006c34 <USBD_Get_USB_Status>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ad6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	da0b      	bge.n	8006af8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3316      	adds	r3, #22
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	e00b      	b.n	8006b10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	4613      	mov	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8006b0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fa ff96 	bl	8001a6c <HAL_PCD_SetAddress>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f874 	bl	8006c34 <USBD_Get_USB_Status>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b086      	sub	sp, #24
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	460b      	mov	r3, r1
 8006b68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b78:	7af9      	ldrb	r1, [r7, #11]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f7fb f8a0 	bl	8001cc2 <HAL_PCD_EP_Transmit>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f853 	bl	8006c34 <USBD_Get_USB_Status>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b92:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bba:	7af9      	ldrb	r1, [r7, #11]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	f7fb f82c 	bl	8001c1c <HAL_PCD_EP_Receive>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f832 	bl	8006c34 <USBD_Get_USB_Status>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fb f84c 	bl	8001c92 <HAL_PCD_EP_GetRxCount>
 8006bfa:	4603      	mov	r3, r0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c0c:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <USBD_static_malloc+0x18>)
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20001ae8 	.word	0x20001ae8

08006c20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d817      	bhi.n	8006c78 <USBD_Get_USB_Status+0x44>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <USBD_Get_USB_Status+0x1c>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c67 	.word	0x08006c67
 8006c58:	08006c6d 	.word	0x08006c6d
 8006c5c:	08006c73 	.word	0x08006c73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
    break;
 8006c64:	e00b      	b.n	8006c7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6a:	e008      	b.n	8006c7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c70:	e005      	b.n	8006c7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	73fb      	strb	r3, [r7, #15]
    break;
 8006c76:	e002      	b.n	8006c7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7c:	bf00      	nop
  }
  return usb_status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <memset>:
 8006c8c:	4402      	add	r2, r0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d100      	bne.n	8006c96 <memset+0xa>
 8006c94:	4770      	bx	lr
 8006c96:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9a:	e7f9      	b.n	8006c90 <memset+0x4>

08006c9c <__libc_init_array>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4d0d      	ldr	r5, [pc, #52]	; (8006cd4 <__libc_init_array+0x38>)
 8006ca0:	4c0d      	ldr	r4, [pc, #52]	; (8006cd8 <__libc_init_array+0x3c>)
 8006ca2:	1b64      	subs	r4, r4, r5
 8006ca4:	10a4      	asrs	r4, r4, #2
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	42a6      	cmp	r6, r4
 8006caa:	d109      	bne.n	8006cc0 <__libc_init_array+0x24>
 8006cac:	4d0b      	ldr	r5, [pc, #44]	; (8006cdc <__libc_init_array+0x40>)
 8006cae:	4c0c      	ldr	r4, [pc, #48]	; (8006ce0 <__libc_init_array+0x44>)
 8006cb0:	f000 f818 	bl	8006ce4 <_init>
 8006cb4:	1b64      	subs	r4, r4, r5
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	2600      	movs	r6, #0
 8006cba:	42a6      	cmp	r6, r4
 8006cbc:	d105      	bne.n	8006cca <__libc_init_array+0x2e>
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc4:	4798      	blx	r3
 8006cc6:	3601      	adds	r6, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__libc_init_array+0xc>
 8006cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cce:	4798      	blx	r3
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	e7f2      	b.n	8006cba <__libc_init_array+0x1e>
 8006cd4:	08006d50 	.word	0x08006d50
 8006cd8:	08006d50 	.word	0x08006d50
 8006cdc:	08006d50 	.word	0x08006d50
 8006ce0:	08006d54 	.word	0x08006d54

08006ce4 <_init>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr

08006cf0 <_fini>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	bf00      	nop
 8006cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf6:	bc08      	pop	{r3}
 8006cf8:	469e      	mov	lr, r3
 8006cfa:	4770      	bx	lr
