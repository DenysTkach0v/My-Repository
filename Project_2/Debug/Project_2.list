
Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002100  08002100  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002100  08002100  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002100  08002100  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000010  08002118  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002118  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa8e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001812  00000000  00000000  0002ab0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002c320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f9  00000000  00000000  0002ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a9a  00000000  00000000  0002d781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c504  00000000  00000000  0004421b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086650  00000000  00000000  0005071f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ffc  00000000  00000000  000d6d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d9d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080020bc 	.word	0x080020bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080020bc 	.word	0x080020bc

0800014c <ds_reset_pulse>:
//function  импульс сброса                                                                   //
//argument  маска порта                                                                      //
//return    0 - устройство обнаружен, 1 - не обнаружено, 2 - к.з. на линии                   //
//*********************************************************************************************
uint8_t ds_reset_pulse(uint16_t PinMask)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
   uint16_t result;

   if((PORT->IDR & PinMask)==0)  return 2;         //проверить линию на отсутствие замыкания
 8000156:	4b1e      	ldr	r3, [pc, #120]	; (80001d0 <ds_reset_pulse+0x84>)
 8000158:	689a      	ldr	r2, [r3, #8]
 800015a:	88fb      	ldrh	r3, [r7, #6]
 800015c:	4013      	ands	r3, r2
 800015e:	2b00      	cmp	r3, #0
 8000160:	d101      	bne.n	8000166 <ds_reset_pulse+0x1a>
 8000162:	2302      	movs	r3, #2
 8000164:	e02f      	b.n	80001c6 <ds_reset_pulse+0x7a>
   PORT->ODR &= ~PinMask;                          //потянуть шину к земле
 8000166:	4b1a      	ldr	r3, [pc, #104]	; (80001d0 <ds_reset_pulse+0x84>)
 8000168:	68db      	ldr	r3, [r3, #12]
 800016a:	88fa      	ldrh	r2, [r7, #6]
 800016c:	43d2      	mvns	r2, r2
 800016e:	4611      	mov	r1, r2
 8000170:	4a17      	ldr	r2, [pc, #92]	; (80001d0 <ds_reset_pulse+0x84>)
 8000172:	400b      	ands	r3, r1
 8000174:	60d3      	str	r3, [r2, #12]
   TIMER->CNT=0;
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <ds_reset_pulse+0x88>)
 8000178:	2200      	movs	r2, #0
 800017a:	625a      	str	r2, [r3, #36]	; 0x24
   while(TIMER->CNT<480){};                        //ждать 480 микросекунд
 800017c:	bf00      	nop
 800017e:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <ds_reset_pulse+0x88>)
 8000180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000182:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000186:	d3fa      	bcc.n	800017e <ds_reset_pulse+0x32>
   PORT->ODR |=  PinMask;                          //отпустить шину
 8000188:	4b11      	ldr	r3, [pc, #68]	; (80001d0 <ds_reset_pulse+0x84>)
 800018a:	68da      	ldr	r2, [r3, #12]
 800018c:	88fb      	ldrh	r3, [r7, #6]
 800018e:	4910      	ldr	r1, [pc, #64]	; (80001d0 <ds_reset_pulse+0x84>)
 8000190:	4313      	orrs	r3, r2
 8000192:	60cb      	str	r3, [r1, #12]
   while(TIMER->CNT<550){};                        //ждать 70 микросекунд
 8000194:	bf00      	nop
 8000196:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <ds_reset_pulse+0x88>)
 8000198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800019a:	f240 2225 	movw	r2, #549	; 0x225
 800019e:	4293      	cmp	r3, r2
 80001a0:	d9f9      	bls.n	8000196 <ds_reset_pulse+0x4a>
   result =  PORT->IDR & PinMask;                 //прочитать шину
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <ds_reset_pulse+0x84>)
 80001a4:	689b      	ldr	r3, [r3, #8]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	88fb      	ldrh	r3, [r7, #6]
 80001aa:	4013      	ands	r3, r2
 80001ac:	81fb      	strh	r3, [r7, #14]
   while(TIMER->CNT<960){};                        //дождаться окончания инициализации
 80001ae:	bf00      	nop
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <ds_reset_pulse+0x88>)
 80001b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001b4:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80001b8:	d3fa      	bcc.n	80001b0 <ds_reset_pulse+0x64>
   if(result) return 1;                            //датчик не обнаружен
 80001ba:	89fb      	ldrh	r3, [r7, #14]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <ds_reset_pulse+0x78>
 80001c0:	2301      	movs	r3, #1
 80001c2:	e000      	b.n	80001c6 <ds_reset_pulse+0x7a>
   return 0;                                       //датчик обнаружен
 80001c4:	2300      	movs	r3, #0
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	40000400 	.word	0x40000400

080001d8 <ds_write_bit>:
//function  передача бита                                                                    //
//argument  значение передаваемого бита,маска порта                                          //
//return    none                                                                             //
//*********************************************************************************************
void ds_write_bit(uint8_t bit,uint16_t PinMask)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	80bb      	strh	r3, [r7, #4]
   TIMER->CNT=0;
 80001e8:	4b14      	ldr	r3, [pc, #80]	; (800023c <ds_write_bit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	625a      	str	r2, [r3, #36]	; 0x24
   PORT->ODR &= ~PinMask;                          //потянуть шину к земле
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <ds_write_bit+0x68>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	88ba      	ldrh	r2, [r7, #4]
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <ds_write_bit+0x68>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	60d3      	str	r3, [r2, #12]
   while(TIMER->CNT<2){};                          //ждать 1 микросекунду
 80001fe:	bf00      	nop
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <ds_write_bit+0x64>)
 8000202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000204:	2b01      	cmp	r3, #1
 8000206:	d9fb      	bls.n	8000200 <ds_write_bit+0x28>
   if(bit) PORT->ODR |=  PinMask;                  //если передаем 1, то отпускаем шину
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d005      	beq.n	800021a <ds_write_bit+0x42>
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <ds_write_bit+0x68>)
 8000210:	68da      	ldr	r2, [r3, #12]
 8000212:	88bb      	ldrh	r3, [r7, #4]
 8000214:	490a      	ldr	r1, [pc, #40]	; (8000240 <ds_write_bit+0x68>)
 8000216:	4313      	orrs	r3, r2
 8000218:	60cb      	str	r3, [r1, #12]
   while(TIMER->CNT<60){};                         //задержка 60 микросекунд
 800021a:	bf00      	nop
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <ds_write_bit+0x64>)
 800021e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000220:	2b3b      	cmp	r3, #59	; 0x3b
 8000222:	d9fb      	bls.n	800021c <ds_write_bit+0x44>
   PORT->ODR |=  PinMask;                          //отпускаем шину
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <ds_write_bit+0x68>)
 8000226:	68da      	ldr	r2, [r3, #12]
 8000228:	88bb      	ldrh	r3, [r7, #4]
 800022a:	4905      	ldr	r1, [pc, #20]	; (8000240 <ds_write_bit+0x68>)
 800022c:	4313      	orrs	r3, r2
 800022e:	60cb      	str	r3, [r1, #12]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40000400 	.word	0x40000400
 8000240:	40010c00 	.word	0x40010c00

08000244 <ds_read_bit>:
//function  чтение бита                                                                      //
//argument  маска порта                                                                      //
//return    прочитанный бит                                                                  //
//*********************************************************************************************
uint16_t ds_read_bit(uint16_t PinMask)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
   uint16_t result;

  TIMER->CNT=0;
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <ds_read_bit+0x64>)
 8000250:	2200      	movs	r2, #0
 8000252:	625a      	str	r2, [r3, #36]	; 0x24
   PORT->ODR &= ~PinMask;                          //потянуть шину к земле
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <ds_read_bit+0x68>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	88fa      	ldrh	r2, [r7, #6]
 800025a:	43d2      	mvns	r2, r2
 800025c:	4611      	mov	r1, r2
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <ds_read_bit+0x68>)
 8000260:	400b      	ands	r3, r1
 8000262:	60d3      	str	r3, [r2, #12]
   while(TIMER->CNT<2){};
 8000264:	bf00      	nop
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <ds_read_bit+0x64>)
 8000268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800026a:	2b01      	cmp	r3, #1
 800026c:	d9fb      	bls.n	8000266 <ds_read_bit+0x22>
   PORT->ODR |=  PinMask;                          //отпускаем шину
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <ds_read_bit+0x68>)
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	490d      	ldr	r1, [pc, #52]	; (80002ac <ds_read_bit+0x68>)
 8000276:	4313      	orrs	r3, r2
 8000278:	60cb      	str	r3, [r1, #12]
   while(TIMER->CNT<15){};                         //задержка 15 микросекунд
 800027a:	bf00      	nop
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <ds_read_bit+0x64>)
 800027e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000280:	2b0e      	cmp	r3, #14
 8000282:	d9fb      	bls.n	800027c <ds_read_bit+0x38>
   result     =  PORT->IDR & PinMask;              //прочитать шину
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <ds_read_bit+0x68>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	b29a      	uxth	r2, r3
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	4013      	ands	r3, r2
 800028e:	81fb      	strh	r3, [r7, #14]
   while(TIMER->CNT<60){};                         //оставшееся время
 8000290:	bf00      	nop
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <ds_read_bit+0x64>)
 8000294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000296:	2b3b      	cmp	r3, #59	; 0x3b
 8000298:	d9fb      	bls.n	8000292 <ds_read_bit+0x4e>
   return result;                                  //возвратить результат
 800029a:	89fb      	ldrh	r3, [r7, #14]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40000400 	.word	0x40000400
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <ds_write_byte>:
//function  запись байта                                                                     //
//argument  передаваемый байт,маска порта                                                    //
//return    none                                                                             //
//*********************************************************************************************
void ds_write_byte(uint8_t byte, uint16_t PinMask)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	460a      	mov	r2, r1
 80002ba:	71fb      	strb	r3, [r7, #7]
 80002bc:	4613      	mov	r3, r2
 80002be:	80bb      	strh	r3, [r7, #4]
   uint8_t i;
   for(i=0;i<8;i++) ds_write_bit(byte&(1<<i), PinMask);
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]
 80002c4:	e011      	b.n	80002ea <ds_write_byte+0x3a>
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	2201      	movs	r2, #1
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	b25a      	sxtb	r2, r3
 80002d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d4:	4013      	ands	r3, r2
 80002d6:	b25b      	sxtb	r3, r3
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	88ba      	ldrh	r2, [r7, #4]
 80002dc:	4611      	mov	r1, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ds_write_bit>
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	3301      	adds	r3, #1
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	d9ea      	bls.n	80002c6 <ds_write_byte+0x16>
}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <ds_read_byte>:
//function  чтение байта                                                                     //
//argument  маска порта                                                                      //
//return    прочитанный байт                                                                 //
//*********************************************************************************************
uint8_t ds_read_byte(uint16_t PinMask)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b084      	sub	sp, #16
 80002fe:	af00      	add	r7, sp, #0
 8000300:	4603      	mov	r3, r0
 8000302:	80fb      	strh	r3, [r7, #6]
   uint8_t i,result = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	73bb      	strb	r3, [r7, #14]
   for(i=0;i<8;i++)
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e013      	b.n	8000336 <ds_read_byte+0x3c>
   if(ds_read_bit(PinMask)) result |= 1<<i;
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff97 	bl	8000244 <ds_read_bit>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d009      	beq.n	8000330 <ds_read_byte+0x36>
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2201      	movs	r2, #1
 8000320:	fa02 f303 	lsl.w	r3, r2, r3
 8000324:	b25a      	sxtb	r2, r3
 8000326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800032a:	4313      	orrs	r3, r2
 800032c:	b25b      	sxtb	r3, r3
 800032e:	73bb      	strb	r3, [r7, #14]
   for(i=0;i<8;i++)
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	3301      	adds	r3, #1
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	7bfb      	ldrb	r3, [r7, #15]
 8000338:	2b07      	cmp	r3, #7
 800033a:	d9e8      	bls.n	800030e <ds_read_byte+0x14>
   return result;
 800033c:	7bbb      	ldrb	r3, [r7, #14]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034e:	f000 fa8b 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000352:	f000 f881 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000356:	f000 f933 	bl	80005c0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800035a:	f000 f8b9 	bl	80004d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800035e:	f000 f905 	bl	800056c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim3);
 8000362:	4838      	ldr	r0, [pc, #224]	; (8000444 <main+0xfc>)
 8000364:	f001 f9e6 	bl	8001734 <HAL_TIM_Base_Start>
  while (1)
  {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

ds_reset_pulse(1<<PIN);          //послать импульс сброса                                       /
 8000368:	f44f 7000 	mov.w	r0, #512	; 0x200
 800036c:	f7ff feee 	bl	800014c <ds_reset_pulse>
ds_write_byte(SKIP_ROM_ADR,1<<PIN);//разрешить доступ к датчику не используя адрес
 8000370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000374:	20cc      	movs	r0, #204	; 0xcc
 8000376:	f7ff ff9b 	bl	80002b0 <ds_write_byte>
ds_write_byte(CONVERT_TEMP,1<<PIN);      //запустить преобразование
 800037a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800037e:	2044      	movs	r0, #68	; 0x44
 8000380:	f7ff ff96 	bl	80002b0 <ds_write_byte>
HAL_Delay (1000);               //дать время для измерения
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f000 fad0 	bl	800092c <HAL_Delay>
ds_reset_pulse(1<<PIN);          //послать импульс сброса
 800038c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000390:	f7ff fedc 	bl	800014c <ds_reset_pulse>
ds_write_byte(SKIP_ROM_ADR,1<<PIN);//разрешить доступ к датчику не используя адрес
 8000394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000398:	20cc      	movs	r0, #204	; 0xcc
 800039a:	f7ff ff89 	bl	80002b0 <ds_write_byte>
ds_write_byte(READ_DATA_COMAND,1<<PIN);      //команда, заставляющая датчик выдать 9 байт своей памяти
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	20be      	movs	r0, #190	; 0xbe
 80003a4:	f7ff ff84 	bl	80002b0 <ds_write_byte>
for(int i=0; i<9; i++ )           //прочитать 9 байт в массив
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	e00d      	b.n	80003ca <main+0x82>
ds_buff[i] = ds_read_byte(1<<PIN);
 80003ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003b2:	f7ff ffa2 	bl	80002fa <ds_read_byte>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4619      	mov	r1, r3
 80003ba:	4a23      	ldr	r2, [pc, #140]	; (8000448 <main+0x100>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	460a      	mov	r2, r1
 80003c2:	701a      	strb	r2, [r3, #0]
for(int i=0; i<9; i++ )           //прочитать 9 байт в массив
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	ddee      	ble.n	80003ae <main+0x66>
//		temp = 4096 - temp;
//	  znak =  '-';
//	}else znak =  '+';


		temp = ds_buff[1];
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <main+0x100>)
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <main+0x104>)
 80003d8:	801a      	strh	r2, [r3, #0]
		temp = temp<<8;
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <main+0x104>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	021b      	lsls	r3, r3, #8
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <main+0x104>)
 80003e4:	801a      	strh	r2, [r3, #0]
		temp |= ds_buff[0];
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <main+0x100>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <main+0x104>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <main+0x104>)
 80003f6:	801a      	strh	r2, [r3, #0]
		temp =temp>>4;//отбрасываем дробную чать
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <main+0x104>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <main+0x104>)
 8000402:	801a      	strh	r2, [r3, #0]
		if(temp > 1000)//если температура <0
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <main+0x104>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800040c:	d90a      	bls.n	8000424 <main+0xdc>
	{
		temp = 4096 - temp;
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <main+0x104>)
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000416:	b29a      	uxth	r2, r3
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <main+0x104>)
 800041a:	801a      	strh	r2, [r3, #0]
	  znak =  '-';
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <main+0x108>)
 800041e:	222d      	movs	r2, #45	; 0x2d
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e002      	b.n	800042a <main+0xe2>
	}else znak =  '+';
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <main+0x108>)
 8000426:	222b      	movs	r2, #43	; 0x2b
 8000428:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, temp, 27, 10);
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <main+0x104>)
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	230a      	movs	r3, #10
 8000432:	221b      	movs	r2, #27
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <main+0x10c>)
 8000436:	f001 fc41 	bl	8001cbc <HAL_UART_Transmit>
	HAL_Delay(1000);
 800043a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800043e:	f000 fa75 	bl	800092c <HAL_Delay>
ds_reset_pulse(1<<PIN);          //послать импульс сброса                                       /
 8000442:	e791      	b.n	8000368 <main+0x20>
 8000444:	20000038 	.word	0x20000038
 8000448:	2000002c 	.word	0x2000002c
 800044c:	200000c8 	.word	0x200000c8
 8000450:	20000000 	.word	0x20000000
 8000454:	20000080 	.word	0x20000080

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b090      	sub	sp, #64	; 0x40
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f001 fdfc 	bl	8002064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800047a:	2302      	movs	r3, #2
 800047c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047e:	2301      	movs	r3, #1
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	2310      	movs	r3, #16
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000486:	2300      	movs	r3, #0
 8000488:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fcf0 	bl	8000e74 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800049a:	f000 f8f1 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 ff5e 	bl	8001378 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f8dd 	bl	8000680 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3740      	adds	r7, #64	; 0x40
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_TIM3_Init+0x94>)
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <MX_TIM3_Init+0x98>)
 80004f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_TIM3_Init+0x94>)
 80004f4:	2207      	movs	r2, #7
 80004f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_TIM3_Init+0x94>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_TIM3_Init+0x94>)
 8000500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_TIM3_Init+0x94>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_TIM3_Init+0x94>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <MX_TIM3_Init+0x94>)
 8000514:	f001 f8be 	bl	8001694 <HAL_TIM_Base_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800051e:	f000 f8af 	bl	8000680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	4619      	mov	r1, r3
 800052e:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_TIM3_Init+0x94>)
 8000530:	f001 f94a 	bl	80017c8 <HAL_TIM_ConfigClockSource>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800053a:	f000 f8a1 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800053e:	2320      	movs	r3, #32
 8000540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <MX_TIM3_Init+0x94>)
 800054c:	f001 fb08 	bl	8001b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000556:	f000 f893 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000038 	.word	0x20000038
 8000568:	40000400 	.word	0x40000400

0800056c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_USART2_UART_Init+0x50>)
 8000574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800057c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_USART2_UART_Init+0x4c>)
 80005a4:	f001 fb3a 	bl	8001c1c <HAL_UART_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ae:	f000 f867 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000080 	.word	0x20000080
 80005bc:	40004400 	.word	0x40004400

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005da:	f043 0320 	orr.w	r3, r3, #32
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0320 	and.w	r3, r3, #32
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_GPIO_Init+0xb4>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0xb4>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <MX_GPIO_Init+0xb4>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_GPIO_Init+0xb4>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	4815      	ldr	r0, [pc, #84]	; (8000678 <MX_GPIO_Init+0xb8>)
 8000622:	f000 fc0f 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <MX_GPIO_Init+0xbc>)
 800062e:	f000 fc09 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000632:	2320      	movs	r3, #32
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0xb8>)
 800064a:	f000 fa77 	bl	8000b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000654:	2311      	movs	r3, #17
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_GPIO_Init+0xbc>)
 8000668:	f000 fa68 	bl	8000b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <HAL_MspInit+0x5c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x5c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_MspInit+0x60>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_MspInit+0x60>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000

080006f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <HAL_TIM_Base_MspInit+0x34>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d10b      	bne.n	800071a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_TIM_Base_MspInit+0x38>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_TIM_Base_MspInit+0x38>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_TIM_Base_MspInit+0x38>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40000400 	.word	0x40000400
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_UART_MspInit+0x88>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d12f      	bne.n	80007ac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 8000752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000756:	61d3      	str	r3, [r2, #28]
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800077c:	2304      	movs	r3, #4
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_UART_MspInit+0x90>)
 8000790:	f000 f9d4 	bl	8000b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000794:	2308      	movs	r3, #8
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_UART_MspInit+0x90>)
 80007a8:	f000 f9c8 	bl	8000b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f875 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
	...

0800081c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800081c:	f7ff fff7 	bl	800080e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000822:	490c      	ldr	r1, [pc, #48]	; (8000854 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000838:	4c09      	ldr	r4, [pc, #36]	; (8000860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000846:	f001 fc15 	bl	8002074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fd7d 	bl	8000348 <main>
  bx lr
 800084e:	4770      	bx	lr
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000858:	08002108 	.word	0x08002108
  ldr r2, =_sbss
 800085c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000860:	200000d0 	.word	0x200000d0

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f92b 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff ff02 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f935 	bl	8000b22 <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f90b 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000004 	.word	0x20000004
 80008ec:	2000000c 	.word	0x2000000c
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a03      	ldr	r2, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	2000000c 	.word	0x2000000c
 8000914:	200000cc 	.word	0x200000cc

08000918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	200000cc 	.word	0x200000cc

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fff0 	bl	8000918 <HAL_GetTick>
 8000938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000952:	bf00      	nop
 8000954:	f7ff ffe0 	bl	8000918 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000000c 	.word	0x2000000c

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff49 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff5e 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffb0 	bl	8000a90 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b08b      	sub	sp, #44	; 0x2c
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e169      	b.n	8000e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b50:	2201      	movs	r2, #1
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 8158 	bne.w	8000e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a9a      	ldr	r2, [pc, #616]	; (8000ddc <HAL_GPIO_Init+0x2a0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d05e      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b78:	4a98      	ldr	r2, [pc, #608]	; (8000ddc <HAL_GPIO_Init+0x2a0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d875      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b7e:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <HAL_GPIO_Init+0x2a4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d058      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b84:	4a96      	ldr	r2, [pc, #600]	; (8000de0 <HAL_GPIO_Init+0x2a4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d86f      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b8a:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <HAL_GPIO_Init+0x2a8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d052      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b90:	4a94      	ldr	r2, [pc, #592]	; (8000de4 <HAL_GPIO_Init+0x2a8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d869      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000b96:	4a94      	ldr	r2, [pc, #592]	; (8000de8 <HAL_GPIO_Init+0x2ac>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d04c      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000b9c:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <HAL_GPIO_Init+0x2ac>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d863      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000ba2:	4a92      	ldr	r2, [pc, #584]	; (8000dec <HAL_GPIO_Init+0x2b0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d046      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a90      	ldr	r2, [pc, #576]	; (8000dec <HAL_GPIO_Init+0x2b0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d85d      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d82a      	bhi.n	8000c08 <HAL_GPIO_Init+0xcc>
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d859      	bhi.n	8000c6a <HAL_GPIO_Init+0x12e>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <HAL_GPIO_Init+0x80>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000c37 	.word	0x08000c37
 8000bc0:	08000c11 	.word	0x08000c11
 8000bc4:	08000c23 	.word	0x08000c23
 8000bc8:	08000c65 	.word	0x08000c65
 8000bcc:	08000c6b 	.word	0x08000c6b
 8000bd0:	08000c6b 	.word	0x08000c6b
 8000bd4:	08000c6b 	.word	0x08000c6b
 8000bd8:	08000c6b 	.word	0x08000c6b
 8000bdc:	08000c6b 	.word	0x08000c6b
 8000be0:	08000c6b 	.word	0x08000c6b
 8000be4:	08000c6b 	.word	0x08000c6b
 8000be8:	08000c6b 	.word	0x08000c6b
 8000bec:	08000c6b 	.word	0x08000c6b
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c6b 	.word	0x08000c6b
 8000bf8:	08000c6b 	.word	0x08000c6b
 8000bfc:	08000c6b 	.word	0x08000c6b
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c2d 	.word	0x08000c2d
 8000c08:	4a79      	ldr	r2, [pc, #484]	; (8000df0 <HAL_GPIO_Init+0x2b4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0e:	e02c      	b.n	8000c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e029      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e024      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	3308      	adds	r3, #8
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e01f      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	330c      	adds	r3, #12
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e01a      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e013      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d105      	bne.n	8000c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	611a      	str	r2, [r3, #16]
          break;
 8000c56:	e009      	b.n	8000c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	615a      	str	r2, [r3, #20]
          break;
 8000c62:	e003      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e000      	b.n	8000c6c <HAL_GPIO_Init+0x130>
          break;
 8000c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d801      	bhi.n	8000c76 <HAL_GPIO_Init+0x13a>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	e001      	b.n	8000c7a <HAL_GPIO_Init+0x13e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d802      	bhi.n	8000c88 <HAL_GPIO_Init+0x14c>
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x152>
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	3b08      	subs	r3, #8
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	210f      	movs	r1, #15
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	6a39      	ldr	r1, [r7, #32]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <HAL_GPIO_Init+0x2b8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd4:	4a48      	ldr	r2, [pc, #288]	; (8000df8 <HAL_GPIO_Init+0x2bc>)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <HAL_GPIO_Init+0x2c0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x1ec>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3f      	ldr	r2, [pc, #252]	; (8000e00 <HAL_GPIO_Init+0x2c4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1e8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <HAL_GPIO_Init+0x2c8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <HAL_GPIO_Init+0x2cc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1e0>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x1ee>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3a:	492f      	ldr	r1, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x2bc>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	492c      	ldr	r1, [pc, #176]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4928      	ldr	r1, [pc, #160]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	4922      	ldr	r1, [pc, #136]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	491e      	ldr	r1, [pc, #120]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4918      	ldr	r1, [pc, #96]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4914      	ldr	r1, [pc, #80]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d021      	beq.n	8000e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	490e      	ldr	r1, [pc, #56]	; (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e021      	b.n	8000e1e <HAL_GPIO_Init+0x2e2>
 8000dda:	bf00      	nop
 8000ddc:	10320000 	.word	0x10320000
 8000de0:	10310000 	.word	0x10310000
 8000de4:	10220000 	.word	0x10220000
 8000de8:	10210000 	.word	0x10210000
 8000dec:	10120000 	.word	0x10120000
 8000df0:	10110000 	.word	0x10110000
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40011400 	.word	0x40011400
 8000e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_GPIO_Init+0x304>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4909      	ldr	r1, [pc, #36]	; (8000e40 <HAL_GPIO_Init+0x304>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f ae8e 	bne.w	8000b50 <HAL_GPIO_Init+0x14>
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	372c      	adds	r7, #44	; 0x2c
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	611a      	str	r2, [r3, #16]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e272      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8087 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e94:	4b92      	ldr	r3, [pc, #584]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d00c      	beq.n	8000eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea0:	4b8f      	ldr	r3, [pc, #572]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d112      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
 8000eac:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eba:	4b89      	ldr	r3, [pc, #548]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d06c      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x12c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d168      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e24c      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x76>
 8000edc:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a7f      	ldr	r2, [pc, #508]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e02e      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x98>
 8000ef2:	4b7b      	ldr	r3, [pc, #492]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a7a      	ldr	r2, [pc, #488]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b78      	ldr	r3, [pc, #480]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a77      	ldr	r2, [pc, #476]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e01d      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0xbc>
 8000f16:	4b72      	ldr	r3, [pc, #456]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a71      	ldr	r2, [pc, #452]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a6e      	ldr	r2, [pc, #440]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e00b      	b.n	8000f48 <HAL_RCC_OscConfig+0xd4>
 8000f30:	4b6b      	ldr	r3, [pc, #428]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a6a      	ldr	r2, [pc, #424]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a67      	ldr	r2, [pc, #412]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fce2 	bl	8000918 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fcde 	bl	8000918 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e200      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0xe4>
 8000f76:	e014      	b.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fcce 	bl	8000918 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fcca 	bl	8000918 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e1ec      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x10c>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d063      	beq.n	8001076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fae:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d11c      	bne.n	8001000 <HAL_RCC_OscConfig+0x18c>
 8000fc6:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d116      	bne.n	8001000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_OscConfig+0x176>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e1c0      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4939      	ldr	r1, [pc, #228]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	e03a      	b.n	8001076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d020      	beq.n	800104a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <HAL_RCC_OscConfig+0x270>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fc83 	bl	8000918 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fc7f 	bl	8000918 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e1a1      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4927      	ldr	r1, [pc, #156]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e015      	b.n	8001076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_RCC_OscConfig+0x270>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fc62 	bl	8000918 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fc5e 	bl	8000918 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e180      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d03a      	beq.n	80010f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d019      	beq.n	80010be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fc42 	bl	8000918 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fc3e 	bl	8000918 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e160      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 face 	bl	8001658 <RCC_Delay>
 80010bc:	e01c      	b.n	80010f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fc28 	bl	8000918 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ca:	e00f      	b.n	80010ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc24 	bl	8000918 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d908      	bls.n	80010ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e146      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	42420000 	.word	0x42420000
 80010e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e9      	bne.n	80010cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a6 	beq.w	8001252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110a:	4b8b      	ldr	r3, [pc, #556]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a87      	ldr	r2, [pc, #540]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112e:	2301      	movs	r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001132:	4b82      	ldr	r3, [pc, #520]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113e:	4b7f      	ldr	r3, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a7e      	ldr	r2, [pc, #504]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114a:	f7ff fbe5 	bl	8000918 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001152:	f7ff fbe1 	bl	8000918 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e103      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	4b75      	ldr	r3, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x4c8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x312>
 8001178:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e02d      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x334>
 800118e:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a69      	ldr	r2, [pc, #420]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6213      	str	r3, [r2, #32]
 800119a:	4b67      	ldr	r3, [pc, #412]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a66      	ldr	r2, [pc, #408]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6213      	str	r3, [r2, #32]
 80011a6:	e01c      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x356>
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4a60      	ldr	r2, [pc, #384]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6213      	str	r3, [r2, #32]
 80011bc:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a5d      	ldr	r2, [pc, #372]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	e00b      	b.n	80011e2 <HAL_RCC_OscConfig+0x36e>
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a5a      	ldr	r2, [pc, #360]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a57      	ldr	r2, [pc, #348]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f023 0304 	bic.w	r3, r3, #4
 80011e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d015      	beq.n	8001216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fb95 	bl	8000918 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff fb91 	bl	8000918 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0b1      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ee      	beq.n	80011f2 <HAL_RCC_OscConfig+0x37e>
 8001214:	e014      	b.n	8001240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fb7f 	bl	8000918 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fb7b 	bl	8000918 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e09b      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	4b40      	ldr	r3, [pc, #256]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d105      	bne.n	8001252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8087 	beq.w	800136a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b08      	cmp	r3, #8
 8001266:	d061      	beq.n	800132c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d146      	bne.n	80012fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_RCC_OscConfig+0x4cc>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb4f 	bl	8000918 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fb4b 	bl	8000918 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e06d      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d108      	bne.n	80012b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4921      	ldr	r1, [pc, #132]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a19      	ldr	r1, [r3, #32]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	430b      	orrs	r3, r1
 80012ca:	491b      	ldr	r1, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x4cc>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb1f 	bl	8000918 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff fb1b 	bl	8000918 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e03d      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x46a>
 80012fc:	e035      	b.n	800136a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_RCC_OscConfig+0x4cc>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb08 	bl	8000918 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fb04 	bl	8000918 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e026      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x498>
 800132a:	e01e      	b.n	800136a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d107      	bne.n	8001344 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e019      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
 8001338:	40021000 	.word	0x40021000
 800133c:	40007000 	.word	0x40007000
 8001340:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0d0      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d910      	bls.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4965      	ldr	r1, [pc, #404]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b8      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	494d      	ldr	r1, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d040      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07f      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e073      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e06b      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4936      	ldr	r1, [pc, #216]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fa56 	bl	8000918 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff fa52 	bl	8000918 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e053      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d210      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4922      	ldr	r1, [pc, #136]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e032      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4916      	ldr	r1, [pc, #88]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001506:	f000 f821 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490a      	ldr	r1, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1cc>)
 8001520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1d0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f9b4 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	080020d4 	.word	0x080020d4
 8001544:	20000004 	.word	0x20000004
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d002      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x30>
 8001576:	2b08      	cmp	r3, #8
 8001578:	d003      	beq.n	8001582 <HAL_RCC_GetSysClockFreq+0x36>
 800157a:	e027      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800157e:	613b      	str	r3, [r7, #16]
      break;
 8001580:	e027      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d010      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0c5b      	lsrs	r3, r3, #17
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ae:	fb03 f202 	mul.w	r2, r3, r2
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e004      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	613b      	str	r3, [r7, #16]
      break;
 80015ca:	e002      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ce:	613b      	str	r3, [r7, #16]
      break;
 80015d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d2:	693b      	ldr	r3, [r7, #16]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	007a1200 	.word	0x007a1200
 80015e8:	080020ec 	.word	0x080020ec
 80015ec:	080020fc 	.word	0x080020fc
 80015f0:	003d0900 	.word	0x003d0900

080015f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800160c:	f7ff fff2 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <HAL_RCC_GetPCLK1Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	080020e4 	.word	0x080020e4

08001630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001634:	f7ff ffde 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0adb      	lsrs	r3, r3, #11
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	080020e4 	.word	0x080020e4

08001658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <RCC_Delay+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <RCC_Delay+0x38>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0a5b      	lsrs	r3, r3, #9
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001674:	bf00      	nop
  }
  while (Delay --);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	60fa      	str	r2, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <RCC_Delay+0x1c>
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000004 	.word	0x20000004
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e041      	b.n	800172a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff f818 	bl	80006f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f000 f940 	bl	8001958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d001      	beq.n	800174c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_TIM_Base_Start+0x88>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00e      	beq.n	800177c <HAL_TIM_Base_Start+0x48>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001766:	d009      	beq.n	800177c <HAL_TIM_Base_Start+0x48>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <HAL_TIM_Base_Start+0x8c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d004      	beq.n	800177c <HAL_TIM_Base_Start+0x48>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_TIM_Base_Start+0x90>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b06      	cmp	r3, #6
 800178c:	d010      	beq.n	80017b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179e:	e007      	b.n	80017b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40012c00 	.word	0x40012c00
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40000800 	.word	0x40000800

080017c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_TIM_ConfigClockSource+0x1c>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0b4      	b.n	800194e <HAL_TIM_ConfigClockSource+0x186>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800180a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800181c:	d03e      	beq.n	800189c <HAL_TIM_ConfigClockSource+0xd4>
 800181e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001822:	f200 8087 	bhi.w	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 8001826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182a:	f000 8086 	beq.w	800193a <HAL_TIM_ConfigClockSource+0x172>
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001832:	d87f      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 8001834:	2b70      	cmp	r3, #112	; 0x70
 8001836:	d01a      	beq.n	800186e <HAL_TIM_ConfigClockSource+0xa6>
 8001838:	2b70      	cmp	r3, #112	; 0x70
 800183a:	d87b      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 800183c:	2b60      	cmp	r3, #96	; 0x60
 800183e:	d050      	beq.n	80018e2 <HAL_TIM_ConfigClockSource+0x11a>
 8001840:	2b60      	cmp	r3, #96	; 0x60
 8001842:	d877      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 8001844:	2b50      	cmp	r3, #80	; 0x50
 8001846:	d03c      	beq.n	80018c2 <HAL_TIM_ConfigClockSource+0xfa>
 8001848:	2b50      	cmp	r3, #80	; 0x50
 800184a:	d873      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 800184c:	2b40      	cmp	r3, #64	; 0x40
 800184e:	d058      	beq.n	8001902 <HAL_TIM_ConfigClockSource+0x13a>
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d86f      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 8001854:	2b30      	cmp	r3, #48	; 0x30
 8001856:	d064      	beq.n	8001922 <HAL_TIM_ConfigClockSource+0x15a>
 8001858:	2b30      	cmp	r3, #48	; 0x30
 800185a:	d86b      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 800185c:	2b20      	cmp	r3, #32
 800185e:	d060      	beq.n	8001922 <HAL_TIM_ConfigClockSource+0x15a>
 8001860:	2b20      	cmp	r3, #32
 8001862:	d867      	bhi.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d05c      	beq.n	8001922 <HAL_TIM_ConfigClockSource+0x15a>
 8001868:	2b10      	cmp	r3, #16
 800186a:	d05a      	beq.n	8001922 <HAL_TIM_ConfigClockSource+0x15a>
 800186c:	e062      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800187e:	f000 f950 	bl	8001b22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	609a      	str	r2, [r3, #8]
      break;
 800189a:	e04f      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80018ac:	f000 f939 	bl	8001b22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018be:	609a      	str	r2, [r3, #8]
      break;
 80018c0:	e03c      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ce:	461a      	mov	r2, r3
 80018d0:	f000 f8b0 	bl	8001a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2150      	movs	r1, #80	; 0x50
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f907 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 80018e0:	e02c      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ee:	461a      	mov	r2, r3
 80018f0:	f000 f8ce 	bl	8001a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2160      	movs	r1, #96	; 0x60
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f8f7 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 8001900:	e01c      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800190e:	461a      	mov	r2, r3
 8001910:	f000 f890 	bl	8001a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2140      	movs	r1, #64	; 0x40
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f8e7 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 8001920:	e00c      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f000 f8de 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 8001932:	e003      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      break;
 8001938:	e000      	b.n	800193c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800193a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <TIM_Base_SetConfig+0xd0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00b      	beq.n	8001988 <TIM_Base_SetConfig+0x30>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001976:	d007      	beq.n	8001988 <TIM_Base_SetConfig+0x30>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <TIM_Base_SetConfig+0xd4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d003      	beq.n	8001988 <TIM_Base_SetConfig+0x30>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a2b      	ldr	r2, [pc, #172]	; (8001a30 <TIM_Base_SetConfig+0xd8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d108      	bne.n	800199a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <TIM_Base_SetConfig+0xd0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00b      	beq.n	80019ba <TIM_Base_SetConfig+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a8:	d007      	beq.n	80019ba <TIM_Base_SetConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <TIM_Base_SetConfig+0xd4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d003      	beq.n	80019ba <TIM_Base_SetConfig+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <TIM_Base_SetConfig+0xd8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d108      	bne.n	80019cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <TIM_Base_SetConfig+0xd0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d103      	bne.n	8001a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f023 0201 	bic.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40000400 	.word	0x40000400
 8001a30:	40000800 	.word	0x40000800

08001a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f023 0201 	bic.w	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f023 030a 	bic.w	r3, r3, #10
 8001a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	621a      	str	r2, [r3, #32]
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	f023 0210 	bic.w	r2, r3, #16
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	031b      	lsls	r3, r3, #12
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001acc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	621a      	str	r2, [r3, #32]
}
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f043 0307 	orr.w	r3, r3, #7
 8001b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b087      	sub	sp, #28
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	021a      	lsls	r2, r3, #8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	609a      	str	r2, [r3, #8]
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e046      	b.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00e      	beq.n	8001bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d009      	beq.n	8001bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d004      	beq.n	8001bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40012c00 	.word	0x40012c00
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800

08001c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e042      	b.n	8001cb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fd72 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2224      	movs	r2, #36	; 0x24
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f971 	bl	8001f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d175      	bne.n	8001dc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_UART_Transmit+0x2c>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e06e      	b.n	8001dca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2221      	movs	r2, #33	; 0x21
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cfa:	f7fe fe0d 	bl	8000918 <HAL_GetTick>
 8001cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d14:	d108      	bne.n	8001d28 <HAL_UART_Transmit+0x6c>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	e003      	b.n	8001d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d30:	e02e      	b.n	8001d90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f848 	bl	8001dd2 <UART_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e03a      	b.n	8001dca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10b      	bne.n	8001d72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	e007      	b.n	8001d82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1cb      	bne.n	8001d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2200      	movs	r2, #0
 8001da2:	2140      	movs	r1, #64	; 0x40
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f814 	bl	8001dd2 <UART_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e006      	b.n	8001dca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001de2:	e03b      	b.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dea:	d037      	beq.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dec:	f7fe fd94 	bl	8000918 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	6a3a      	ldr	r2, [r7, #32]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e03a      	b.n	8001e7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d023      	beq.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	d020      	beq.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d01d      	beq.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d116      	bne.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f81d 	bl	8001e84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00f      	b.n	8001e7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d0b4      	beq.n	8001de4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b095      	sub	sp, #84	; 0x54
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	330c      	adds	r3, #12
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	e853 3f00 	ldrex	r3, [r3]
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eac:	643a      	str	r2, [r7, #64]	; 0x40
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001eb4:	e841 2300 	strex	r3, r2, [r1]
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e5      	bne.n	8001e8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	e853 3f00 	ldrex	r3, [r3]
 8001ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3314      	adds	r3, #20
 8001ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee8:	e841 2300 	strex	r3, r2, [r1]
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e5      	bne.n	8001ec0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d119      	bne.n	8001f30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	330c      	adds	r3, #12
 8001f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	e853 3f00 	ldrex	r3, [r3]
 8001f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f023 0310 	bic.w	r3, r3, #16
 8001f12:	647b      	str	r3, [r7, #68]	; 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f1c:	61ba      	str	r2, [r7, #24]
 8001f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f20:	6979      	ldr	r1, [r7, #20]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	e841 2300 	strex	r3, r2, [r1]
 8001f28:	613b      	str	r3, [r7, #16]
   return(result);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e5      	bne.n	8001efc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f3e:	bf00      	nop
 8001f40:	3754      	adds	r7, #84	; 0x54
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f82:	f023 030c 	bic.w	r3, r3, #12
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2c      	ldr	r2, [pc, #176]	; (800205c <UART_SetConfig+0x114>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d103      	bne.n	8001fb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fb0:	f7ff fb3e 	bl	8001630 <HAL_RCC_GetPCLK2Freq>
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	e002      	b.n	8001fbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fb8:	f7ff fb26 	bl	8001608 <HAL_RCC_GetPCLK1Freq>
 8001fbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009a      	lsls	r2, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <UART_SetConfig+0x118>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	0119      	lsls	r1, r3, #4
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009a      	lsls	r2, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <UART_SetConfig+0x118>)
 8001ff6:	fba3 0302 	umull	r0, r3, r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2064      	movs	r0, #100	; 0x64
 8001ffe:	fb00 f303 	mul.w	r3, r0, r3
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	3332      	adds	r3, #50	; 0x32
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <UART_SetConfig+0x118>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	4419      	add	r1, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009a      	lsls	r2, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fbb2 f2f3 	udiv	r2, r2, r3
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <UART_SetConfig+0x118>)
 800202e:	fba3 0302 	umull	r0, r3, r3, r2
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2064      	movs	r0, #100	; 0x64
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	3332      	adds	r3, #50	; 0x32
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <UART_SetConfig+0x118>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	440a      	add	r2, r1
 8002052:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40013800 	.word	0x40013800
 8002060:	51eb851f 	.word	0x51eb851f

08002064 <memset>:
 8002064:	4603      	mov	r3, r0
 8002066:	4402      	add	r2, r0
 8002068:	4293      	cmp	r3, r2
 800206a:	d100      	bne.n	800206e <memset+0xa>
 800206c:	4770      	bx	lr
 800206e:	f803 1b01 	strb.w	r1, [r3], #1
 8002072:	e7f9      	b.n	8002068 <memset+0x4>

08002074 <__libc_init_array>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	2600      	movs	r6, #0
 8002078:	4d0c      	ldr	r5, [pc, #48]	; (80020ac <__libc_init_array+0x38>)
 800207a:	4c0d      	ldr	r4, [pc, #52]	; (80020b0 <__libc_init_array+0x3c>)
 800207c:	1b64      	subs	r4, r4, r5
 800207e:	10a4      	asrs	r4, r4, #2
 8002080:	42a6      	cmp	r6, r4
 8002082:	d109      	bne.n	8002098 <__libc_init_array+0x24>
 8002084:	f000 f81a 	bl	80020bc <_init>
 8002088:	2600      	movs	r6, #0
 800208a:	4d0a      	ldr	r5, [pc, #40]	; (80020b4 <__libc_init_array+0x40>)
 800208c:	4c0a      	ldr	r4, [pc, #40]	; (80020b8 <__libc_init_array+0x44>)
 800208e:	1b64      	subs	r4, r4, r5
 8002090:	10a4      	asrs	r4, r4, #2
 8002092:	42a6      	cmp	r6, r4
 8002094:	d105      	bne.n	80020a2 <__libc_init_array+0x2e>
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	f855 3b04 	ldr.w	r3, [r5], #4
 800209c:	4798      	blx	r3
 800209e:	3601      	adds	r6, #1
 80020a0:	e7ee      	b.n	8002080 <__libc_init_array+0xc>
 80020a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a6:	4798      	blx	r3
 80020a8:	3601      	adds	r6, #1
 80020aa:	e7f2      	b.n	8002092 <__libc_init_array+0x1e>
 80020ac:	08002100 	.word	0x08002100
 80020b0:	08002100 	.word	0x08002100
 80020b4:	08002100 	.word	0x08002100
 80020b8:	08002104 	.word	0x08002104

080020bc <_init>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr

080020c8 <_fini>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr
